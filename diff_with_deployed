diff --git a/.eslintrc.json b/.eslintrc.json
deleted file mode 100644
index 3363e78..0000000
--- a/.eslintrc.json
+++ /dev/null
@@ -1,30 +0,0 @@
-{
-  "env": {
-    "browser": true,
-    "es2021": true
-  },
-  "extends": [
-    "eslint:recommended",
-    "plugin:react/recommended",
-    "plugin:@typescript-eslint/recommended"
-  ],
-  "parser": "@typescript-eslint/parser",
-  "parserOptions": {
-    "ecmaFeatures": {
-      "jsx": true
-    },
-    "ecmaVersion": "latest",
-    "sourceType": "module"
-  },
-  "plugins": ["react", "react-hooks", "@typescript-eslint"],
-  "rules": {
-    // suppress errors for missing 'import React' in files
-    "react/react-in-jsx-scope": "off",
-    "@typescript-eslint/no-namespace": "off"
-  },
-  "settings": {
-    "react": {
-      "version": "detect"
-    }
-  }
-}
diff --git a/jest.config.js b/jest.config.js
index e7da1a9..cae16fb 100644
--- a/jest.config.js
+++ b/jest.config.js
@@ -1,5 +1,4 @@
 /** @type {import('ts-jest/dist/types').InitialOptionsTsJest} */
-// eslint-disable-next-line no-undef
 module.exports = {
   preset: "ts-jest",
   testEnvironment: "node",
diff --git a/package.json b/package.json
index 777f6b1..61f1883 100644
--- a/package.json
+++ b/package.json
@@ -1,7 +1,6 @@
 {
   "name": "calendar",
-  "version": "1.0.0",
-  "license": "MIT",
+  "version": "0.0.0",
   "scripts": {
     "dev": "vite",
     "test": "jest",
@@ -11,36 +10,24 @@
     "preview": "vite preview"
   },
   "dependencies": {
-    "jwt-decode": "3.1.2",
-    "react": "18.0.0",
-    "react-dom": "18.0.0",
-    "react-hook-form": "7.30.0"
+    "jwt-decode": "^3.1.2",
+    "react": "^17.0.2",
+    "react-dom": "^17.0.2",
+    "react-hook-form": "^7.25.1"
   },
   "devDependencies": {
-    "@testing-library/react": "13.1.1",
-    "@testing-library/react-hooks": "8.0.0",
-    "@testing-library/user-event": "14.1.1",
-    "@types/jest": "27.4.1",
-    "@types/node": "17.0.25",
-    "@types/react": "18.0.6",
-    "@types/react-dom": "18.0.2",
-    "@typescript-eslint/eslint-plugin": "5.21.0",
-    "@typescript-eslint/parser": "5.21.0",
-    "@vitejs/plugin-react": "1.3.1",
-    "autoprefixer": "10.4.5",
-    "eslint": "8.14.0",
-    "eslint-plugin-react": "7.29.4",
-    "eslint-plugin-react-hooks": "4.5.0",
-    "eslint-watch": "8.0.0",
-    "jest": "27.5.1",
-    "postcss": "8.4.12",
-    "tailwind-styled-components": "2.1.6",
-    "tailwindcss": "3.0.24",
-    "ts-jest": "27.1.4",
-    "typescript": "4.6.3",
-    "vite": "2.9.5"
-  },
-  "resolutions": {
-    "@types/react": "18.0.6"
+    "@types/jest": "^27.4.1",
+    "@types/node": "^17.0.23",
+    "@types/react": "^17.0.33",
+    "@types/react-dom": "^17.0.10",
+    "@vitejs/plugin-react": "^1.0.7",
+    "autoprefixer": "^10.4.0",
+    "jest": "^27.5.1",
+    "postcss": "^8.4.5",
+    "tailwind-styled-components": "^2.0.3",
+    "tailwindcss": "^3.0.5",
+    "ts-jest": "^27.1.4",
+    "typescript": "^4.6.3",
+    "vite": "^2.7.2"
   }
 }
diff --git a/postcss.config.js b/postcss.config.js
index 9f23996..12a703d 100644
--- a/postcss.config.js
+++ b/postcss.config.js
@@ -1,4 +1,3 @@
-// eslint-disable-next-line no-undef
 module.exports = {
   plugins: {
     tailwindcss: {},
diff --git a/scripts/build_fullstack.sh b/scripts/build_fullstack.sh
index 41372bc..ad57c39 100755
--- a/scripts/build_fullstack.sh
+++ b/scripts/build_fullstack.sh
@@ -12,6 +12,5 @@ yarn build;
 cp -r ../../php-server/CRUD/backend ./dist;
 
 # 3. Copy the entire project to lamp server
-rm -r /opt/lampp/htdocs/*
-cp -r ./dist/* /opt/lampp/htdocs/.
+cp -r /home/set/dev/projects/calendar/app/* /opt/lampp/htdocs/.
 
diff --git a/src/App.tsx b/src/App.tsx
index d51323a..b87f936 100644
--- a/src/App.tsx
+++ b/src/App.tsx
@@ -2,12 +2,9 @@ import "@/index.css";
 import { LayoutMain } from "@/layouts/Main";
 import Login from "@/components/Login/main";
 import { useUserSession } from "./hooks/useUserSession";
-import { DragAndDropTouch } from "./window/touch";
 
-DragAndDropTouch();
+export default function App() {
+  const { isUserLogged } = useUserSession();
 
-export function App() {
-  const token = useUserSession();
-
-  return false ? <Login /> : <LayoutMain />;
+  return !isUserLogged ? <Login /> : <LayoutMain />;
 }
diff --git a/src/api/handlers.ts b/src/api/handlers.ts
index 046fada..3d2d3c7 100644
--- a/src/api/handlers.ts
+++ b/src/api/handlers.ts
@@ -1,10 +1,12 @@
 import { EventClass } from "@/classes/event";
-import { useEventSelected, useSetEventSelected } from "@/context/eventSelected";
+import {
+  useEventSelected,
+  useSetEventSelected,
+} from "@/globalStorage/eventSelected";
 import { useControllerDispatch } from "@/hooks/useController";
 import { useControllerDispatchDates } from "@/hooks/useControllerDate";
 import { useEventDispatch } from "@/hooks/useEventsState";
 import { usePushedDaysDispatcher } from "@/hooks/usePushDays";
-import { event } from "@/interfaces";
 import { fetchEvent } from "@/utils/fetchEvent";
 
 // Custom-hook: useGethCancel
@@ -58,8 +60,12 @@ export function useGethCancel() {
 // A temporary event is tracked by getUnusedId
 //
 
-export function useGethDeleteEvent(eventSelected: event): () => void {
+export function useGethDeleteEvent(): () => void {
+  const eventSelected = useEventSelected();
+  const SetEventSelected = useSetEventSelected();
+  const dispatchController = useControllerDispatch();
   const eventDispatcher = useEventDispatch();
+  const dispatchControllerDates = useControllerDispatchDates();
   const pushDaysDispatcher = usePushedDaysDispatcher();
 
   // First time I'm able to catch error Failed to Fetch
@@ -70,6 +76,16 @@ export function useGethDeleteEvent(eventSelected: event): () => void {
     }
     const deleteResourceInAPI = async () => {
       const result = await fetchEvent("DELETE", eventSelected);
+      if (result.status === 204) {
+        dispatchController({
+          type: "setController",
+          payload: { id: 0, client: "", job: "" },
+        });
+        dispatchControllerDates({
+          type: "clearDates",
+        });
+        SetEventSelected(null);
+      }
 
       return result.status;
     };
diff --git a/src/api/queries.ts b/src/api/queries.ts
index d9937fb..d10c27b 100644
--- a/src/api/queries.ts
+++ b/src/api/queries.ts
@@ -3,29 +3,28 @@ import { fetchEvent_Day } from "@/utils/fetchEvent";
 import React, { Dispatch } from "react";
 import { useEventDispatch, useEventState } from "@/hooks/useEventsState";
 import { DateService } from "@/utils/Date";
-import { Context } from "@/hooks/useIsDragging";
+import { useIsDragging } from "@/hooks/useIsDragging";
 import { usePushedDaysDispatcher } from "@/hooks/usePushDays";
-import { event } from "@/interfaces";
 
-export const usePostQuery = (fullDate: event.date) => {
+export const usePostQuery = (fullDate: string) => {
   const pushDaysDispatcher = usePushedDaysDispatcher();
   const eventDispatcher = useEventDispatch();
-  //const { isDragging } = Context.useIsDragging();
+  const isDragging = useIsDragging();
   const isWeekend = DateService.IsWeekend(fullDate);
   const isLocked = false;
   //Closure
-  return () => {
-    if (/*isDragging ||*/ isLocked || isWeekend) {
+  return async () => {
+    if (isDragging.state || isLocked || isWeekend) {
       return;
     }
     queryEvent(fullDate, eventDispatcher, pushDaysDispatcher);
   };
 };
 
-const queryEvent = (
-  date: event.date,
+const queryEvent = async (
+  date: string,
   eventDispatcher: React.Dispatch<Action>,
-  pushDaysDispatcher: Dispatch<Set<event.date>>
+  pushDaysDispatcher: Dispatch<Set<string>>
 ) => {
   const MaxId = Number.MAX_SAFE_INTEGER;
   const newEvent = {
@@ -48,7 +47,7 @@ const queryEvent = (
       try {
         const data = await fetchEvent_Day("POST", newEvent);
         return { status: true, data };
-      } catch {
+      } catch (e: any) {
         return { status: false, data: [] };
       }
     };
@@ -84,4 +83,86 @@ const queryEvent = (
 
   const caller = FetchClosure();
   return caller();
+
+  /*
+  return async () => {
+    const deleteResourceInAPI = async () => {
+      const result = await fetchEvent("DELETE", eventSelected!);
+      if (result.status === 204) {
+        dispatchController({
+          type: "setController",
+          payload: { id: 0, client: "", job: "" },
+        });
+        dispatchControllerDates({
+          type: "clearDates",
+        });
+        SetEventSelected(null);
+      }
+
+      return result.status;
+    };
+
+    const MAX_ATTEMPTS = 10;
+    const success = (code: number) => code === 204;
+
+    eventDispatcher({
+      type: "delete",
+      payload: [eventSelected!],
+    });
+
+    //This try to fetch 10 times before refresh the web page
+
+    for (let i = 0; i < MAX_ATTEMPTS; i++) {
+      try {
+        const status = await deleteResourceInAPI();
+        if (success(status)) {
+          break;
+        }
+      } catch (e) {}
+      if (i === MAX_ATTEMPTS - 1) {
+        // It migth happen
+        alert("Something went wrong, unable to delete event");
+
+        //First strategy, force to refresh the page
+
+        window.location.reload();
+
+        //Second strategy, clear the state and contine
+
+        //        eventDispatcher({
+        //          type: "appendarray",
+        //          payload: [eventSelected!],
+        //        });
+        //        dispatchController({
+        //          type: "setController",
+        //          payload: { id: 0, client: "", job: "" },
+        //        });
+        //        dispatchControllerDates({
+        //          type: "clearDates",
+        //        });
+        //        SetEventSelected(null);
+      }
+    }
+  };
+
+*/
+
+  //    const dbState2: Array<event> = [];
+  //    //const dbResponse: Array<event> = await result.text();
+
+  //    //This is the way I have to replace the Id of an event, since the action "replacebyid" uses the id to change the other fields, I can't use it to replace the id itself
+  //    eventDispatcher({
+  //      type: "delete",
+  //      payload: [newEvent],
+  //    });
+  //    eventDispatcher({
+  //      type: "syncDB",
+  //      payload: dbState2,
+  //    });
+
+  //
+
+  //     if (start === fullDate && end === fullDate) {
+  //       setEventController(null);
+  //     }
 };
diff --git a/src/api/useGetAllEventsFrom.ts b/src/api/useGetAllEventsFrom.ts
index cb82a43..2181673 100644
--- a/src/api/useGetAllEventsFrom.ts
+++ b/src/api/useGetAllEventsFrom.ts
@@ -1,16 +1,14 @@
-import { CustomTypes, nullEvent } from "@/customTypes";
+import { CustomTypes, CustomValues } from "@/customTypes";
 import { fetchEvent } from "@/utils/fetchEvent";
 import { zeroPadd } from "@/utils/zeroPadd";
 import { useEffect } from "react";
 import { usePushedDaysDispatcher } from "@/hooks/usePushDays";
-import { useEventDispatch } from "@/hooks/useEventsState";
-import { useCleanSession } from "@/hooks/useCleanSession";
+import { useEventDispatch } from "../hooks/useEventsState";
 
 export const useGetAllEventsFrom = ({ year, month }: CustomTypes.Month) => {
   const fromYear = year;
   const fromMonth = zeroPadd(month);
   const pushDatesDispatcher = usePushedDaysDispatcher();
-  const cleanSession = useCleanSession();
 
   const eventsDispatcher = useEventDispatch();
 
@@ -19,22 +17,15 @@ export const useGetAllEventsFrom = ({ year, month }: CustomTypes.Month) => {
     //my local version of MySQL responds in the same way, but the version of freehostia gives an empty array with success code 201
     const start = `${fromYear}-${fromMonth}-01`;
     (async () => {
-      const eventDate = { ...nullEvent(), start, end: start };
+      const eventDate = { ...CustomValues.nullEvent, start, end: start };
       const response = await fetchEvent("GET_FROM", eventDate);
-      try {
-        const state = await response.json();
-        eventsDispatcher({
-          type: "syncDB",
-          payload: state,
-          callback: pushDatesDispatcher,
-        });
-      } catch {
-        setTimeout(() => {
-          window.alert("Session is expired");
+      const state = await response.json();
 
-          cleanSession();
-        }, 1000);
-      }
+      eventsDispatcher({
+        type: "syncDB",
+        payload: state,
+        callback: pushDatesDispatcher,
+      });
     })();
   }, []);
 };
diff --git a/src/classes/event.ts b/src/classes/event.ts
index 3dda9ac..265c33d 100644
--- a/src/classes/event.ts
+++ b/src/classes/event.ts
@@ -1,6 +1,6 @@
 // Type of event data
 
-import { nullEvent } from "@/customTypes";
+import { CustomValues } from "@/customTypes";
 import { event } from "@/interfaces";
 
 // Parent: has all its attributes matched with some database entry
@@ -37,7 +37,7 @@ export class EventClass {
   }
 
   static getParentEventFrom(state: Array<event>, id: number) {
-    return state.find((e) => e.id === id) || nullEvent();
+    return state.find((e) => e.id === id) || CustomValues.nullEvent;
   }
   static getParentEvent(family: Array<event>) {
     const parentId = family.at(0)?.id || 0;
@@ -47,7 +47,7 @@ export class EventClass {
         (e) =>
           EventClass.transformToParentId(e) === parentId &&
           e.job !== "#isChildren"
-      ) || nullEvent()
+      ) || CustomValues.nullEvent
     );
   }
 
diff --git a/src/classes/token.ts b/src/classes/token.ts
index 689d39b..72e4d28 100644
--- a/src/classes/token.ts
+++ b/src/classes/token.ts
@@ -1,75 +1,111 @@
-import { nullToken } from "@/customTypes";
+import jwt_decode, { InvalidTokenError } from "jwt-decode";
 import { DateService } from "@/utils/Date";
-import { DocumentIO } from "@/window/cookie";
-import { safeDecodeJWT } from "@/modules/jwt";
-
-/**
- * Token class current usage:
- *
- * Important:
- * new instances of class Token hides side effect data accessing from window.document.cookie
- * but access is well controlled
- *
- * Calendar Access:
- *
- * Calendar Credential Level:
- *
- *  - Token.user
- *  - Token.isAuth
- *  -
- */
+import { token } from "@/interfaces";
+type EncodedToken = {
+  data: string | undefined;
+};
+
 export class Token {
-  private token;
-  constructor() {
-    this.token = this.readAndDecode(); //hidden deps: [jwt_decode, DocumentIO.readTokens]
+  constructor(token: token) {
+    this.token = token;
   }
+  private token: token;
+
+  public static nullToken = new Token({
+    name: "",
+    exp: 0,
+    data: { iss: "", usr: "", aut: "", rus: "" },
+  });
 
-  /** Public method to instantiate new Token class objects with private member token set to nullToken  */
-  public static null() {
-    const token = new Token();
-    token.token = nullToken();
-    return token;
+  // Is valid token just do some checks in any found token
+  public isValid() {
+    const secondsSinceEpoch = DateService.secondsSinceEpoch();
+
+    return this.token.exp > secondsSinceEpoch && this.token.data.usr !== "";
   }
 
-  public data() {
-    return Object.freeze(this.token.data);
+  public expires() {
+    return this.token.exp;
   }
 
   public user() {
     return this.token.data.usr || "invited";
   }
-  /**
-   * A valid token is not expired and has a non-empty user name
-   */
-  public isValid() {
-    const expired = this.token.exp > DateService.secondsSinceEpoch();
-    return expired && !!this.token.data.usr.length;
-  }
 
   public isAuth() {
     return this.token.data.aut === "read-write";
   }
 
-  public isSameUser(other: Token) {
-    return this.token.data.uid === other.token.data.uid;
+  public isSamePerson(other: Token) {
+    const sameAuth = this.isAuth() === other.isAuth();
+    const sameName = this.user() === other.user();
+
+    return sameAuth && sameName;
   }
 
-  /**
-   * call to no-throw module wrapper: safeDecodeJWT <- jwt_decode
-   * call to window.document accessor: cookie
-   * @returns last valid decoded token
-   */
-  private readAndDecode(input = DocumentIO.readTokens()) {
-    const tokens = input
-      .map(safeDecodeJWT)
-      .sort((prev, next) => next.exp - prev.exp);
-
-    if (tokens.length === 0) {
-      return nullToken();
-    } else {
-      return tokens[0];
+  public static getToken = () => {
+    const cookies = document.cookie.split(";").map((cookie) => cookie.trim());
+
+    //All captured cookies are filtered to remove session cookies
+    //there is no other way to get token cookies.
+    //By design emitted tokens change its name randomly each 24hours
+    //so there is no easy pattern in there. In fact yes it is, anyone could
+    //make a function called isJWTToken matching some sort of JWT pattern
+    //TODO: make a function isJWTToken to filter cookies exactly
+    const tokenCookies: Array<string | undefined> = cookies
+      .filter((cookie) => {
+        const cookieName = cookie.split("=").at(0);
+        return cookieName !== "PHPSESSID";
+      })
+      .map((cookie) => cookie.split("=").at(1));
+
+    //Mapping all remaining cookies of type JWT Token to decode and parse them
+    // It should be only one, but if cookies deletion failed could be more
+    const tokensPull = tokenCookies.map((cookie): EncodedToken => {
+      if (!cookie) {
+        return { data: undefined };
+      }
+
+      let decoded: string = "";
+      try {
+        decoded = decodeURIComponent(cookie);
+      } catch (e: any) {
+        //catch type must be any, Typescript doesn't allow to specify type as URIError
+        console.error("URIError", e instanceof URIError); // true
+      }
+
+      if (!decoded) {
+        return { data: undefined };
+      }
+
+      let token: EncodedToken = { data: undefined };
+      try {
+        token = JSON.parse(decoded);
+      } catch (e: any) {
+        console.error("JSON parse SyntaxError", e instanceof SyntaxError);
+      }
+
+      return token;
+    });
+
+    try {
+      const decodedTokens: Array<Token> = tokensPull.map((encodeToken) => {
+        return new Token(jwt_decode<token>(encodeToken.data || ""));
+      });
+
+      //Sort tokens giving the bigger exp date in the first position of the array
+      const sortedTokens = decodedTokens.sort(
+        (prev, next) => next.expires() - prev.expires()
+      );
+      if (!sortedTokens[0].isValid()) {
+        throw Error("Invalid token");
+      }
+
+      return sortedTokens[0];
+    } catch (token: any) {
+      return Token.nullToken;
     }
-  }
+  };
 }
 
 // DONE
diff --git a/src/components/Day/logic.ts b/src/components/Day/logic.ts
deleted file mode 100644
index 261a5d1..0000000
--- a/src/components/Day/logic.ts
+++ /dev/null
@@ -1,63 +0,0 @@
-import { DateService } from "@/utils/Date";
-import { useEventDispatch, useEventState } from "@/hooks/useEventsState";
-import { usePushedDaysDispatcher } from "@/hooks/usePushDays";
-import {
-  useTemporaryEvent,
-  useTemporaryEventDispatcher,
-} from "@/context/temporaryEvents";
-import { fetchEvent_Day } from "@/utils/fetchEvent";
-import { useDnDEventRef, useSetDnDEventRef } from "@/context/dndEventRef";
-import { event } from "@/interfaces";
-
-type date = string;
-
-export const useOnDragEnter = () => {
-  // const events = useEventState();
-  const dndEventRef = useDnDEventRef();
-  console.log("REading dnd event", dndEventRef);
-  const setDnDEventRef = useSetDnDEventRef();
-  if (dndEventRef === null) {
-    return;
-  }
-  // const temporaryEventDispatcher = useTemporaryEventDispatcher();
-  const eventDispatcher = useEventDispatch();
-  const pushDaysDispatcher = usePushedDaysDispatcher();
-
-  return (date: date, dndEvent: event) => {
-    if (typeof dndEvent === "undefined") {
-      return;
-    }
-    console.warn("closure", date, dndEvent);
-    //TODO: pulling from red is working like this, but pulling from green it is more or less the opposite
-    if (dndEvent.mutable?.bubble === 1) {
-      console.warn("Right");
-      dndEvent.end = date;
-      const isRewind = DateService.DaysFrom(dndEvent.start, date) < 0;
-      if (isRewind) {
-        dndEvent.start = date;
-      }
-    } else if (dndEvent.mutable?.bubble === -1) {
-      console.warn("Left");
-      dndEvent.start = date;
-      const isRewind = DateService.DaysFrom(dndEvent.end, date) > 0;
-      if (isRewind) {
-        dndEvent.end = date;
-      }
-    } else if (dndEvent.mutable?.bubble === 0) {
-      console.warn("Center");
-      dndEvent.start = date;
-      dndEvent.end = date;
-    }
-    //temporaryEventDispatcher(newEvent);
-    setDnDEventRef(dndEvent);
-    //-------------------------------------------------------------------------------------------
-
-    fetchEvent_Day("PUT", dndEvent);
-    eventDispatcher({
-      type: "update",
-      payload: [{ ...dndEvent }],
-      callback: pushDaysDispatcher,
-    });
-    console.log("Dispatching", dndEvent);
-  };
-};
diff --git a/src/components/Day/main.tsx b/src/components/Day/main.tsx
index 5488876..a71d9ee 100644
--- a/src/components/Day/main.tsx
+++ b/src/components/Day/main.tsx
@@ -1,15 +1,22 @@
 import { styles } from "@/components/Day/tw";
 import { MemoEventsThrower } from "@/components/EventsThrower/main";
-import { memo } from "react";
+import { memo, useRef } from "react";
 import { DateService } from "@/utils/Date";
+import { useEventDispatch } from "@/hooks/useEventsState";
+import {
+  useTemporaryEvent,
+  useTemporaryEventDispatcher,
+} from "@/globalStorage/temporaryEvents";
+import { fetchEvent_Day } from "@/utils/fetchEvent";
 import { usePostQuery } from "@/api/queries";
-import { useOnDragEnter } from "./logic";
+import { usePushedDaysDispatcher } from "@/hooks/usePushDays";
 
-interface Day {
+type WithChildren<T = {}> = T & { children?: React.ReactNode };
+type Day = WithChildren<{
   daynumber: number;
   fullDate: string;
   pushedDays: Set<string>;
-}
+}>;
 
 // Used Context in Day Component:
 //
@@ -22,32 +29,87 @@ interface Day {
 // cControllerState - id,client,job
 
 function Day({ daynumber, fullDate, pushedDays }: Day) {
-  //Callbacks
+  const pushDaysDispatcher = usePushedDaysDispatcher();
   const addEvent = usePostQuery(fullDate);
-  //const onDragEnter = useOnDragEnter();
-
-  //Computed:
   //TODO: Locked days not impl
   const $isLock = false;
+
   const $isWeekend = DateService.IsWeekend(fullDate);
-  const styledProps = { $isWeekend, $isLock };
+  const eventDispatcher = useEventDispatch();
+
+  //dnd
+  const temporaryEvent = useTemporaryEvent();
+  const temporaryEventDispatcher = useTemporaryEventDispatcher();
+  const dayDivRef = useRef<HTMLDivElement>(null);
+
+  //Determine if this day is current local date of client
   const isToday = fullDate === DateService.FormatDate(DateService.GetDate());
 
+  const styledProps = { $isWeekend, $isLock };
+
+  const hOnDragEnter = (e: any) => {
+    if (temporaryEvent.end === fullDate) {
+      return;
+    }
+    //e.stopPropagation();
+    const x = e.clientX;
+    const y = e.clientY;
+    const el = document.elementsFromPoint(x, y);
+    const dayDiv = el.find((e) => e.id.includes("day"));
+    //All of this is the same as Board callback
+    const id = dayDiv?.id;
+    if (!id) {
+      return;
+    }
+    const date = id.split("day-")[1];
+    const isRewind = DateService.DaysFrom(temporaryEvent.start, date) < 0;
+    const newEvent = { ...temporaryEvent };
+    //TODO: pulling from red is working like this, but pulling from green it is more or less the opposite
+    if (temporaryEvent.mutable?.bubble === 1) {
+      newEvent.end = date;
+      //     if (isRewind) {
+      //       newEvent.start = date;
+      //     } else {
+      //       newEvent.end = date;
+      //     }
+    } else if (temporaryEvent.mutable?.bubble === -1) {
+      newEvent.start = date;
+      //    if (!isRewind) {
+      //      newEvent.start = date;
+      //    } else {
+      //      newEvent.end = date;
+      //    }
+    } else {
+      newEvent.start = date;
+      newEvent.end = date;
+    }
+    //-------------------------------------------------------------------------------------------
+    eventDispatcher({
+      type: "update",
+      payload: [newEvent],
+      callback: pushDaysDispatcher,
+    });
+    fetchEvent_Day("PUT", newEvent);
+    //temporaryEventDispatcher(newEvent);
+  };
+
   return (
     <styles.contain
-      id={`day:${fullDate}`}
+      id={`day-${fullDate}`}
       {...styledProps}
-      //ref={dayDivRef}
+      ref={dayDivRef}
       onMouseDown={addEvent}
+      onDragEnter={hOnDragEnter}
     >
-      <styles.header id={`day-header:${fullDate}`} {...styledProps}>
-        <styles.daySpot
-          id={`day-spot:${fullDate}`}
-          $isToday={isToday}
-        >{`${daynumber}`}</styles.daySpot>
+      <styles.header {...styledProps}>
+        <styles.daySpot $isToday={isToday}>{`${daynumber}`}</styles.daySpot>
       </styles.header>
 
-      <MemoEventsThrower day={fullDate} pushedDays={pushedDays} />
+      {true ? (
+        <MemoEventsThrower day={fullDate} pushedDays={pushedDays} />
+      ) : (
+        <></>
+      )}
     </styles.contain>
   );
 }
diff --git a/src/components/Day/tw.tsx b/src/components/Day/tw.tsx
index 5a00345..a5e6a0c 100644
--- a/src/components/Day/tw.tsx
+++ b/src/components/Day/tw.tsx
@@ -21,12 +21,12 @@ export namespace styles {
   }>`
 	min-h-[15vh] transition-colors font-light shadow-[0px_0px_1px_rgb(226,232,240)]
 
-	${({ $isLock }: { $isLock: boolean }) =>
+	${({ $isLock }) =>
     ($isLock && "bg-orange-400 cursor-not-allowed select-none") ||
     (!$isLock && "bg-white day cursor-pointer") ||
     ""}
 
-	${({ $isWeekend }: { $isWeekend: boolean }) =>
+	${({ $isWeekend }) =>
     ($isWeekend &&
       "bg-slate-300 z-Dayoff outline outline-[1px] outline-slate-100 select-none") ||
     (!$isWeekend && "outline outline-[1px] outline-slate-300") ||
@@ -43,10 +43,10 @@ export namespace styles {
   }>`
 border-b-[1px] border-slate-200 day-header flex sm:justify-end justify-center bg-white
 
-${({ $isLock }: { $isLock: boolean }) =>
+${({ $isLock }) =>
   ($isLock && "bg-orange-400 z-Dayoff bg-opacity-50 select-none") || ""}	
 
-${({ $isWeekend }: { $isWeekend: boolean }) =>
+${({ $isWeekend }) =>
   ($isWeekend && "bg-slate-300 hover:bg-slate-50 select-none") ||
   (!$isWeekend && "") ||
   ""}	
@@ -57,8 +57,7 @@ ${() => toPrint}
 
   export const daySpot = tw.div<{ $isToday: boolean }>`
 	flex justify-center items-center rounded-full bg-white w-7 h-7 custombp:w-5 custombp:h-5 customtp:w-5 customtp:h-5 sm:my-1 ml-1 mx-1
-	${({ $isToday }: { $isToday: boolean }) =>
-    ($isToday && "bg-blue-400 text-white") || ""}
+	${({ $isToday }) => ($isToday && "bg-blue-400 text-white") || ""}
 	${() => toPrint}
 `;
 }
diff --git a/src/components/Event/clientSelector.tsx b/src/components/Event/clientSelector.tsx
deleted file mode 100644
index d93d35e..0000000
--- a/src/components/Event/clientSelector.tsx
+++ /dev/null
@@ -1,40 +0,0 @@
-import * as StyledEvent from "./tw";
-import { event } from "@/interfaces/index";
-const CLIENTS = [
-  "Client_1",
-  "Client_2",
-  "Client_3",
-  "Client_4",
-  "Client_5",
-  "Client_6",
-  "Client_7",
-  "Client_8",
-  "Client_9",
-  "Unavailable",
-];
-
-export type ClientSelector = {
-  event: event;
-  style: object;
-};
-
-export const EventClientSelector = ({ event, style }: ClientSelector) => {
-  return (
-    <StyledEvent.TWStyledSelect
-      value={event.client}
-      style={style}
-      id={"select"}
-    >
-      <option value="default" hidden>
-        Select Client
-      </option>
-      {CLIENTS.map((clientIterator, index) => {
-        return (
-          <option key={index} value={clientIterator}>
-            {clientIterator}
-          </option>
-        );
-      })}
-    </StyledEvent.TWStyledSelect>
-  );
-};
diff --git a/src/components/Event/eventCard.tsx b/src/components/Event/eventCard.tsx
deleted file mode 100644
index 88b60d3..0000000
--- a/src/components/Event/eventCard.tsx
+++ /dev/null
@@ -1,20 +0,0 @@
-import { EventTextArea } from "./textArea";
-import { ClientSelector, EventClientSelector } from "./clientSelector";
-import { TextArea } from "./textArea";
-import { event } from "@/interfaces";
-
-type EventCard = TextArea & ClientSelector;
-
-export const EventCard = ({ event, style }: EventCard) => {
-  return (
-    <div className="flex flex-col w-full">
-      <EventClientSelector event={event} style={style} />
-
-      <EventTextArea event={event} />
-    </div>
-  );
-};
-
-export const EventTail = ({ event }: { event: event }) => {
-  return <div className="text-transparent ">{event.client}</div>;
-};
diff --git a/src/components/Event/logic.ts b/src/components/Event/logic.ts
index 3ddbeae..fcfd18c 100644
--- a/src/components/Event/logic.ts
+++ b/src/components/Event/logic.ts
@@ -7,6 +7,7 @@ import { ClientColorStyles } from "@/utils/giveMeColor";
 import React, { useEffect, useMemo, useRef, useState } from "react";
 import { fetchEvent } from "@/utils/fetchEvent";
 import { useEventDispatch } from "@/hooks/useEventsState";
+import { resourceLimits } from "worker_threads";
 import { usePushedDaysDispatcher } from "@/hooks/usePushDays";
 
 export const useTransitionStyle = (
@@ -36,11 +37,13 @@ export const useTransitionStyle = (
     const temporaryBody = composeStyle(
       "lightgray",
       "2px solid transparent",
+      "black",
       "2px solid transparent"
     );
     const header = composeStyle(
       `rgb(${r_c}, ${g_c}, ${b_c})`,
       "2px solid transparent",
+      "black",
       "2px solid transparent"
     );
     return {
@@ -65,17 +68,20 @@ export const useTransitionStyle = (
         ? composeStyle(
             "lightgray",
             "2px solid transparent",
+            "black",
             "2px solid transparent"
           )
         : !hover
         ? composeStyle(
             `rgb(${r}, ${g}, ${b})`,
             "2px solid transparent",
+            "transparent",
             "2px solid transparent"
           )
         : composeStyle(
             `rgb(${r_h},${g_h},${b_h})`,
             `2px solid rgb(${r_b},${g_b},${b_b})`,
+            "transparent",
             "2px solid transparent"
           );
     } else {
@@ -83,17 +89,20 @@ export const useTransitionStyle = (
         ? composeStyle(
             "lightgray",
             "2px solid transparent",
+            "black",
             "2px solid transparent"
           )
         : !hover
         ? composeStyle(
-            `rgb(${r_h}, ${g_h}, ${b_h})`,
+            `rgb(${r}, ${g}, ${b})`,
             "2px solid transparent",
+            "black",
             "2px solid transparent"
           )
         : composeStyle(
             `rgb(${r_h}, ${g_h}, ${b_h})`,
             `2px solid rgb(${r_b}, ${g_b},${b_b})`,
+            "white",
             `2px solid rgb(${r_b}, ${g_b},${b_b})`
           );
     }
@@ -108,6 +117,7 @@ export const useTransitionStyle = (
 const composeStyle = (
   background: string,
   borderTop: string,
+  color: string,
   borderLeft: string
 ) => {
   return {
@@ -115,6 +125,7 @@ const composeStyle = (
     borderTop,
     borderBottom: borderTop,
     borderRight: borderTop,
+    color,
     borderLeft,
   };
 };
@@ -148,7 +159,7 @@ export const useStorage = (event: event) => {
   //Inline Edit
   const [isSelected, setIsSelected] = useState(false);
   const isFocus = useRef<HTMLInputElement>(null);
-  //const jobInput = event.job;
+  const [jobInput, setJobInput] = useState(event.job);
   const eventDispatcher = useEventDispatch();
 
   const readyToSubmit = useRef<boolean>(false);
@@ -181,7 +192,7 @@ export const useStorage = (event: event) => {
 
   const hOnBlur = () => {
     if (readyToSubmit.current) {
-      updateEvent({ ...event });
+      updateEvent({ ...event, job: jobInput });
       readyToSubmit.current = false;
     }
 
@@ -223,17 +234,13 @@ export const useStorage = (event: event) => {
         payload: [{ ...event, job: `${event.job} - ` }],
         callback: pushDaysDispatcher,
       });
-      if (isFocus.current !== null) {
-        isFocus.current.blur();
-      }
+      isFocus.current!.blur();
     }
 
     const cancel = e.key === "Escape";
     if (cancel) {
       readyToSubmit.current = false;
-      if (isFocus.current !== null) {
-        isFocus.current.blur();
-      }
+      isFocus.current!.blur();
     }
   };
 
@@ -246,6 +253,8 @@ export const useStorage = (event: event) => {
 
   const toComponent = {
     isSelected,
+    jobInput,
+    isFocus,
     ...eventUpdater,
   };
 
@@ -261,7 +270,7 @@ export const useStorage = (event: event) => {
 //    temporaryEventDispatcher(parentEvent);
 //  }}
 //  onTouchEnd={() => {
-//    temporaryEventDispatcher(nullEvent());
+//    temporaryEventDispatcher(CustomValues.nullEvent);
 //  }}
 //  onTouchMove={(e) => {
 //    e.preventDefault();
diff --git a/src/components/Event/main.tsx b/src/components/Event/main.tsx
index 5c77e90..783aa26 100644
--- a/src/components/Event/main.tsx
+++ b/src/components/Event/main.tsx
@@ -1,25 +1,46 @@
 import * as StyledEvent from "./tw";
-import { event } from "@/interfaces/index";
+import { event } from "@interfaces/index";
 import { DateService } from "@/utils/Date";
 import { useHoverEvent, useStorage, useTransitionStyle } from "./logic";
+import { useEventDispatch, useEventState } from "@/hooks/useEventsState";
+import { EventClass } from "@/classes/event";
 import {
-  useEventDispatch,
-  useEventState,
-  useGetEventFamily,
-} from "@/hooks/useEventsState";
-import { useTemporaryEventDispatcher } from "@/context/temporaryEvents";
-//import { useCtxKeyBuffer } from "@/context/keyBuffer";
-//import { useSetEventSelected } from "@/context/eventSelected";
-import { useEffect, useLayoutEffect, useRef, useState } from "react";
-import { EventCard, EventTail } from "./eventCard";
-import { useGethDeleteEvent } from "@/api/handlers";
-import { Context } from "@/hooks/useIsDragging";
+  useTemporaryEvent,
+  useTemporaryEventDispatcher,
+} from "@/globalStorage/temporaryEvents";
+import { CustomValues } from "@/customTypes";
+import { fetchEvent } from "@/utils/fetchEvent";
+import { useCtxKeyBuffer } from "@/globalStorage/keyBuffer";
+import { useSetEventSelected } from "@/globalStorage/eventSelected";
+import { useEffect, useLayoutEffect, useMemo, useRef, useState } from "react";
 import { usePushedDaysDispatcher } from "@/hooks/usePushDays";
-import { useDnDEventRef, useSetDnDEventRef } from "@/context/dndEventRef";
-import { useSetEventSelected } from "@/context/eventSelected";
-import { nullEvent } from "@/customTypes";
+//import { usePostQuery } from "@/api/queries";
+
+const CLIENTS = [
+  "Client_1",
+  "Client_2",
+  "Client_3",
+  "Client_4",
+  "Client_5",
+  "Client_6",
+  "Client_7",
+  "Client_8",
+  "Client_9",
+];
+const useGetEventFamily = (event: event) => {
+  const events = useEventState();
+  const parentId = EventClass.transformToParentId(event);
+  //return all events that has the same parentId
+  const family = events.filter(
+    (e) => EventClass.transformToParentId(e) === parentId
+  );
+
+  const parent = EventClass.getParentEvent(family);
+  return [parent, family] as [event, Array<event>];
+};
 
 export const Event = ({ event, index }: { event: event; index: number }) => {
+  const pushDaysDispatcher = usePushedDaysDispatcher();
   const eventRef = useRef<HTMLDivElement>();
 
   const [state, setState] = useState<{ height: string }>({ height: "0px" });
@@ -27,60 +48,40 @@ export const Event = ({ event, index }: { event: event; index: number }) => {
   //week.from = event.start;
   const eventsOfWeek = useEventState(week);
   useLayoutEffect(() => {
-    if (typeof eventRef.current !== "undefined") {
-      event.mutable = {
-        height: `${eventRef.current.clientHeight}px`,
-        eventRef: eventRef.current,
-        index: index, //!Corrected bug: was using event.end wich is zero
-      };
-    }
+    event.mutable = {
+      height: `${eventRef.current!.clientHeight}px`,
+      eventRef: eventRef.current!,
+      index: index, //!Corrected bug: was using event.end wich is zero
+    };
   }, [event]);
 
   useEffect(() => {
-    if (typeof event.mutable === "object") {
-      const sameRow = eventsOfWeek
-        .filter((e) => {
-          if (
-            typeof e.mutable === "object" &&
-            typeof event.mutable === "object"
-          ) {
-            return e.mutable.index === event.mutable.index;
-          }
-        }) //!Bug solved: e.mutable is undefined
-        .filter((e) => e.id > 0);
-      const allH = sameRow.map((r) => {
-        if (typeof r.mutable === "object") {
-          return r.mutable.eventRef.clientHeight;
-        } else {
-          return 0;
-        }
-      });
-
-      const maxH = Math.max(...allH);
-      const newState = { height: `${maxH}px` };
-
-      if (typeof event.mutable === "object") {
-        event.mutable.height = newState.height;
-      }
-      setState(newState);
-    }
+    const sameRow = eventsOfWeek
+      .filter((e) => e.mutable!.index === event.mutable!.index)
+      .filter((e) => e.id > 0);
+    const allH = sameRow.map((r) => r.mutable!.eventRef.clientHeight);
+    const maxH = Math.max(...allH);
+    const newState = { height: `${maxH}px` };
+
+    event.mutable!.height = newState.height;
+    setState(newState);
   }, [event]);
 
   //--------------------------------------------
 
   const isChildren = event.job.includes("#isChildren");
   //edit mode
-  const [parentEvent] = useGetEventFamily(event);
+  const [parent, family] = useGetEventFamily(event);
+  const parentEvent = EventClass.getParentEvent(family);
 
   //drag and drop
-  //const temporaryEvent = useTemporaryEvent();
+  const temporaryEvent = useTemporaryEvent();
   const temporaryEventDispatcher = useTemporaryEventDispatcher();
-  //const eventDispatcher = useEventDispatch();
+  const eventDispatcher = useEventDispatch();
   //keybuffer to detect when control keyword is pressed
-  //const keyBuffer = useCtxKeyBuffer();
+  const keyBuffer = useCtxKeyBuffer();
 
-  //const setEventController = useSetEventSelected();
-  const hDelete = useGethDeleteEvent(event);
+  const setEventController = useSetEventSelected();
 
   // Hover consumes the controller state to decide if the on going render will be styled as a hover envet
   const { hover, ...mouseHover } = useHoverEvent(event);
@@ -89,7 +90,7 @@ export const Event = ({ event, index }: { event: event; index: number }) => {
   const eventInlineStyle = useTransitionStyle(isChildren, hover, event);
 
   // Database storage logic
-  const { isSelected, ...eventUpdater } = useStorage(event);
+  const { isSelected, isFocus, jobInput, ...eventUpdater } = useStorage(event);
 
   //TODO: avoid magic numbers
   const spreadCells = Math.min(
@@ -97,72 +98,23 @@ export const Event = ({ event, index }: { event: event; index: number }) => {
     8
   );
 
-  //const dayRef = useRef<Element>();
-  const { setIsDragging } = Context.useIsDragging();
-  const eventDispatcher = useEventDispatch();
-  const pushDaysDispatcher = usePushedDaysDispatcher();
-
-  const setDnDEventRef = useSetDnDEventRef();
-  const dndEvent = useDnDEventRef();
-
-  const [localIsDragging, setLocalIsDragging] = useState(false);
-
-  const hOnDragStart = (
-    e: React.DragEvent<HTMLDivElement>,
-    direction: number
-  ) => {
-    e.stopPropagation();
-    const parentCopy: event = {
-      ...parentEvent,
-    };
-    if (typeof parentEvent.mutable === "object") {
-      parentCopy.mutable = { ...parentEvent.mutable };
-      parentCopy.mutable.bubble = direction;
-    }
-    //!ISSUE: parentEvent isn't available in other context consumers (e.g: useOnDragEnter) after firing this dispatch order:
-    //temporaryEventDispatcher(parentEvent);
-    console.warn("drag start", parentCopy);
-    setDnDEventRef(parentCopy);
-    setTimeout(() => {
-      eventDispatcher({
-        type: "tonull",
-        payload: [{ ...event }],
-        callback: pushDaysDispatcher,
-      });
-
-      //setLocalIsDragging(true);
-    }, 1000);
-  };
-  const hOnDragEnd = (e: React.DragEvent<HTMLDivElement>) => {
-    e.stopPropagation();
-    setDnDEventRef(nullEvent());
-    ////setLocalIsDragging(false);
-    eventDispatcher({
-      type: "fromnull",
-      payload: [{ ...dndEvent }],
-      callback: pushDaysDispatcher,
-    });
-  };
+  const dayRef = useRef<Element>();
 
   return (
     <>
       <StyledEvent.TWflexContainer
-        $hidde={localIsDragging}
-        onMouseDown={(e) => e.stopPropagation()}
-        onKeyDown={(e) => {
-          if (e.ctrlKey && e.code === "Delete") {
-            hDelete();
-          }
-        }}
-        {...mouseHover}
         draggable={"true"}
-        onDragStart={(e) => {
-          hOnDragStart(e, 0);
+        {...mouseHover}
+        onMouseDownCapture={(e) => {
+          e.stopPropagation();
+          setEventController(parentEvent);
         }}
-        onDragEnd={hOnDragEnd}
-        onMouseUp={() => {
-          console.log("mouse up");
-          //e.stopPropagation();
+        onDragStart={(e) => {
+          e.stopPropagation();
+          console.log("On drag start from Center", parentEvent);
+          const copyOfParent: event = { ...parentEvent };
+          copyOfParent.mutable!.bubble = 0;
+          temporaryEventDispatcher(parentEvent);
         }}
       >
         <StyledEvent.TWtextContent
@@ -177,24 +129,83 @@ export const Event = ({ event, index }: { event: event; index: number }) => {
           {...eventUpdater}
         >
           {!isChildren ? (
-            <EventCard event={event} style={eventInlineStyle.static} />
+            <div className="flex flex-col w-full">
+              {
+                <StyledEvent.TWStyledSelect
+                  value={event.client}
+                  style={eventInlineStyle.static}
+                  id={"select"}
+                >
+                  <option value="default" hidden>
+                    Select Client
+                  </option>
+                  {CLIENTS.map((clientIterator, index) => {
+                    return (
+                      <option key={index} value={clientIterator}>
+                        {clientIterator}
+                      </option>
+                    );
+                  })}
+                </StyledEvent.TWStyledSelect>
+              }
+              {
+                <StyledEvent.TWjobContent $isHover={hover}>
+                  <span
+                    className="textarea rounded-[5px] w-full p-1 "
+                    role="textbox"
+                    contentEditable={true}
+                    onClick={(e) => {
+                      console.log("CLICK");
+                      e.currentTarget.focus();
+                      //console.log("Click", e.currentTarget);
+                      eventDispatcher({
+                        type: "update",
+                        payload: [{ ...event, job: "" }],
+                        callback: pushDaysDispatcher,
+                      });
+                    }}
+                    onKeyDown={(e) => {
+                      console.log("KEYDOWN");
+                      //console.log(e.code);
+                      if (e.code === "Enter") {
+                        const job = e.currentTarget.textContent || "";
+                        console.log("Dispatching", job);
+                        fetchEvent("PUT", { ...event, job });
+                        eventDispatcher({
+                          type: "update",
+                          payload: [{ ...event, job }],
+                          callback: pushDaysDispatcher,
+                        });
+                        e.preventDefault();
+                        e.stopPropagation();
+                        e.currentTarget.blur();
+                      }
+                    }}
+                  >
+                    {event.job}
+                  </span>
+                </StyledEvent.TWjobContent>
+              }
+            </div>
           ) : (
-            <EventTail event={event} />
+            <>
+              <div className="text-transparent">{event.client}</div>
+            </>
           )}
         </StyledEvent.TWtextContent>
-        {
-          //DnD Logic
-        }
         {!isSelected && (
           <StyledEvent.TWextend_Left
             $cells={spreadCells}
             style={state}
-            title={`Drag here to extend ${event.client}'s job`}
+            title={`Drag here to extend ${event.client}\'s job`}
             draggable={"true"}
             onDragStart={(e) => {
-              hOnDragStart(e, -1);
+              e.stopPropagation();
+              console.log("On drag start from Left", parentEvent);
+              const copyOfParent: event = { ...parentEvent };
+              copyOfParent.mutable!.bubble = -1;
+              temporaryEventDispatcher(parentEvent);
             }}
-            onDragEnd={hOnDragEnd}
           >
             {"+"}
           </StyledEvent.TWextend_Left>
@@ -203,28 +214,21 @@ export const Event = ({ event, index }: { event: event; index: number }) => {
           <StyledEvent.TWextend
             $cells={spreadCells}
             style={state}
-            title={`Drag here to extend ${event.client}'s job`}
+            title={`Drag here to extend ${event.client}\'s job`}
             draggable={"true"}
             onDragStart={(e) => {
-              hOnDragStart(e, 1);
+              e.stopPropagation();
+              console.log("On drag start from Right", parentEvent);
+              const copyOfParent: event = { ...parentEvent };
+              copyOfParent.mutable!.bubble = 1;
+              temporaryEventDispatcher(parentEvent);
             }}
-            onDragEnd={hOnDragEnd}
           >
             {"+"}
           </StyledEvent.TWextend>
         )}
 
-        <StyledEvent.TWplaceholder
-          key={"p" + event.id}
-          style={state}
-          onMouseDown={() => {
-            //const x = e.clientX;
-            //const y = e.clientY;
-            //const el = document.elementsFromPoint(x, y);
-            //const dayDiv = el.find((e) => e.id.includes("day"));
-            //console.log("Clicked on placeholder", dayDiv);
-          }}
-        >
+        <StyledEvent.TWplaceholder key={"p" + event.id} style={state}>
           {"placeholder"}
         </StyledEvent.TWplaceholder>
       </StyledEvent.TWflexContainer>
@@ -233,20 +237,17 @@ export const Event = ({ event, index }: { event: event; index: number }) => {
 };
 
 export const EventHolder = ({ event }: { event: event }) => {
-  const [parent] = useGetEventFamily(event);
+  const [parent, family] = useGetEventFamily(event);
   const eventRef = useRef<HTMLDivElement>();
   const [state, setState] = useState<{ height: string }>({ height: "0px" });
   //
   useLayoutEffect(() => {
-    if (typeof eventRef.current !== "undefined") {
-      event.mutable = {
-        height: `${eventRef.current.clientHeight}px`,
-        eventRef: eventRef.current,
-        index: typeof parent.mutable === "object" ? parent.mutable.index : 0, //!Corrected bug: was using event.end wich is zero
-      };
-    }
-    const h0 =
-      typeof parent.mutable === "object" ? parent.mutable.height : "0px";
+    event.mutable = {
+      height: `${eventRef.current!.clientHeight}px`,
+      eventRef: eventRef.current!,
+      index: parent.mutable?.index!, //!Corrected bug: was using event.end wich is zero
+    };
+    const h0 = parent.mutable?.height || "0px";
     const h1 = parseInt(h0.split("px")[0]);
     const newState = { height: `${h1}px` };
     setState(newState);
@@ -258,156 +259,10 @@ export const EventHolder = ({ event }: { event: event }) => {
 
   //
   return (
-    <StyledEvent.TWflexContainer $hidde={false} ref={eventRef}>
+    <StyledEvent.TWflexContainer ref={eventRef}>
       <StyledEvent.TWplaceholder style={newState}>
         {event.id + " : " + event.mutable?.index}
       </StyledEvent.TWplaceholder>
     </StyledEvent.TWflexContainer>
   );
 };
-
-export const EventOff = ({ event }: { event: event }) => {
-  const state = { height: "0px" };
-
-  //const week = DateService.GetWeekRangeOf(event.start);
-  //week.from = event.start;
-  //const eventsOfWeek = useEventState(week);
-
-  //--------------------------------------------
-
-  const isChildren = event.job.includes("#isChildren");
-  //edit mode
-  const [parentEvent] = useGetEventFamily(event);
-
-  //drag and drop
-  //const temporaryEvent = useTemporaryEvent();
-  //const temporaryEventDispatcher = useTemporaryEventDispatcher();
-  const setDnDEventRef = useSetDnDEventRef();
-  //const eventDispatcher = useEventDispatch();
-  //keybuffer to detect when control keyword is pressed
-  //const keyBuffer = useCtxKeyBuffer();
-
-  //const setEventController = useSetEventSelected();
-  const hDelete = useGethDeleteEvent(event);
-
-  // Hover consumes the controller state to decide if the on going render will be styled as a hover envet
-  const { hover, ...mouseHover } = useHoverEvent(event);
-
-  // Style hook for state transitions
-  const eventInlineStyle = useTransitionStyle(isChildren, hover, event);
-
-  // Database storage logic
-  const { isSelected, ...eventUpdater } = useStorage(event);
-
-  //TODO: avoid magic numbers
-  const spreadCells = Math.min(
-    1 + DateService.DaysFrom(event.start, event.end),
-    8
-  );
-
-  //const dayRef = useRef<Element>();
-
-  return (
-    <>
-      <StyledEvent.TWflexContainer
-        $hidde={false}
-        onMouseDown={(e) => e.stopPropagation()}
-        onKeyDown={(e) => {
-          if (e.ctrlKey && e.code === "Delete") {
-            hDelete();
-          }
-        }}
-        {...mouseHover}
-        //draggable={"true"}
-        // onDragStart={(e) => {
-        //   e.stopPropagation();
-        //   console.log("On drag start from Center", parentEvent);
-        //   const copyOfParent: event = { ...parentEvent };
-        //   if (typeof copyOfParent.mutable === "object") {
-        //     copyOfParent.mutable.bubble = 1;
-        //   }
-        //   //temporaryEventDispatcher(parentEvent);
-        //   setDnDEventRef(parentEvent);
-        // }}
-        // onDragOver={(e) => {
-        //   console.log("on drag over", e.target);
-        // }}
-      >
-        <StyledEvent.TWtextContent
-          $isChildren={isChildren}
-          $isHover={hover}
-          style={eventInlineStyle.dinamic}
-          key={event.id}
-          $cells={spreadCells}
-          title={`${event.client}: ${event.job} from: ${event.start} to ${event.start}`}
-          $client={event.client.toLowerCase()}
-          {...eventUpdater}
-        >
-          {!isChildren ? (
-            <EventCard event={event} style={eventInlineStyle.static} />
-          ) : (
-            <EventTail event={event} />
-          )}
-        </StyledEvent.TWtextContent>
-        {
-          //DnD Logic
-        }
-        {!isSelected && (
-          <StyledEvent.TWextend_Left
-            $cells={spreadCells}
-            style={state}
-            title={`Drag here to extend ${event.client}'s job`}
-            //   draggable={"true"}
-            //   onDragStart={(e) => {
-            //     e.stopPropagation();
-            //     console.log("On drag start from Left", parentEvent);
-            //     const copyOfParent: event = { ...parentEvent };
-            //     if (typeof copyOfParent.mutable === "object") {
-            //       copyOfParent.mutable.bubble = -1;
-            //     }
-            //     //temporaryEventDispatcher(parentEvent);
-            //     setDnDEventRef(parentEvent);
-            //   }}
-          >
-            {"+"}
-          </StyledEvent.TWextend_Left>
-        )}
-        {!isSelected && (
-          <StyledEvent.TWextend
-            $cells={spreadCells}
-            style={state}
-            title={`Drag here to extend ${event.client}'s job`}
-            //  draggable={"true"}
-            //  onDragStart={(e) => {
-            //    e.stopPropagation();
-            //    console.log("On drag start from Right x", parentEvent);
-            //    //const copyOfParent: event = { ...parentEvent };
-            //    //if (typeof copyOfParent.mutable === "object") {
-            //    //  copyOfParent.mutable.bubble = 1;
-            //    //}
-            //    console.log("storing", parentEvent);
-            //    //temporaryEventDispatcher(parentEvent);
-            //    setDnDEventRef(parentEvent);
-            //  }}
-          >
-            {"+"}
-          </StyledEvent.TWextend>
-        )}
-
-        <StyledEvent.TWplaceholder
-          key={"p" + event.id}
-          style={state}
-          onMouseDown={() => {
-            //const x = e.clientX;
-            //const y = e.clientY;
-            //const el = document.elementsFromPoint(x, y);
-            //const dayDiv = el.find((e) => e.id.includes("day"));
-            //console.log("Clicked on placeholder", dayDiv);
-          }}
-        >
-          {"placeholder"}
-        </StyledEvent.TWplaceholder>
-      </StyledEvent.TWflexContainer>
-    </>
-  );
-};
diff --git a/src/components/Event/textArea.tsx b/src/components/Event/textArea.tsx
deleted file mode 100644
index de76d61..0000000
--- a/src/components/Event/textArea.tsx
+++ /dev/null
@@ -1,39 +0,0 @@
-import * as StyledEvent from "./tw";
-import { event } from "@/interfaces/index";
-
-import { fetchEvent } from "@/utils/fetchEvent";
-import { useState } from "react";
-
-export type TextArea = {
-  event: event;
-};
-
-export const EventTextArea = ({ event }: TextArea) => {
-  const [state, setState] = useState(event.job);
-
-  return (
-    <StyledEvent.TWjobContent>
-      <span
-        className="textarea rounded-[5px] w-full p-1 caret-black"
-        role="textbox"
-        contentEditable={true}
-        onKeyDown={(e) => {
-          if (e.code === "Enter") {
-            const job = e.currentTarget.textContent || "";
-            fetchEvent("PUT", { ...event, job });
-            setState(job);
-            e.currentTarget.blur();
-          } else if (e.code === "Escape") {
-            e.currentTarget.blur();
-          }
-        }}
-        onBlur={() => {
-          console.log("Element finished");
-          //window.location.reload();
-        }}
-      >
-        {state}
-      </span>
-    </StyledEvent.TWjobContent>
-  );
-};
diff --git a/src/components/Event/tw.tsx b/src/components/Event/tw.tsx
index 2be5564..9b03061 100644
--- a/src/components/Event/tw.tsx
+++ b/src/components/Event/tw.tsx
@@ -1,12 +1,11 @@
 import tw from "tailwind-styled-components";
 
-export const TWjobContent = tw.div`
+export const TWjobContent = tw.div<{ $isHover: boolean }>`
 flex whitespace-normal break-words overflow-hidden overflow-ellipsis
 `;
 
-export const TWflexContainer = tw.div<{ $hidde: boolean }>`
+export const TWflexContainer = tw.div`
   flex flex-col justify-start my-1 transition-colors
-	${({ $hidde }: { $hidde: boolean }) => ($hidde && "hidden") || ""}
 	`;
 
 export const TWtextContent = tw.div<{
@@ -21,8 +20,8 @@ flex flex-row gap-1 items-center absolute
 whitespace-nowrap overflow-hidden overflow-ellipsis
 active:text-black ml-[0.1rem] transition-colors
 printable
-${({ $client }: { $client: string }) => $client}
-${({ $cells }: { $cells: number }) =>
+${({ $client }) => $client}
+${({ $cells }) =>
   ($cells === 1 && "event-span-1") ||
   ($cells === 2 && "event-span-2") ||
   ($cells === 3 && "event-span-3") ||
@@ -34,18 +33,17 @@ ${({ $cells }: { $cells: number }) =>
   "extend-event-1"}
 		
 rounded-r-[10px]
-${({ $isChildren }: { $isChildren: boolean }) =>
-  (!$isChildren && "rounded-l-[10px]") || ""}
-${({ $isHover, $isChildren }: { $isHover: boolean; $isChildren: boolean }) =>
+${({ $isChildren }) => (!$isChildren && "rounded-l-[10px]") || ""}
+${({ $isHover, $isChildren }) =>
   ($isHover && !$isChildren && "text-black") ||
   ($isChildren && "text-transparent") ||
   ""}
 `;
 
 export const TWextend = tw.div<{ $cells: number }>`
-	mt-[1px] absolute text-transparent extend-event-e min-w-[7.14%] z-ExtendEvent /*border-2 border-red-500*/
+	mt-[1px] absolute text-transparent extend-event min-w-[4.14%] z-ExtendEvent /*border-2 border-red-500*/
 
-	${({ $cells }: { $cells: number }) =>
+	${({ $cells }) =>
     ($cells === 1 && "extend-event-1") ||
     ($cells === 2 && "extend-event-2") ||
     ($cells === 3 && "extend-event-3") ||
@@ -56,11 +54,10 @@ export const TWextend = tw.div<{ $cells: number }>`
     ($cells === 8 && "extend-event-8") ||
     "extend-event-1"}
 `;
-
 export const TWextend_Left = tw.div<{ $cells: number }>`
-	mt-[1px] absolute text-transparent extend-event-w min-w-[7.14%] z-ExtendEvent /*border-2 border-green-500*/
+	mt-[1px] absolute text-transparent extend-event min-w-[4.14%] z-ExtendEvent /*border-2 border-green-500*/
 
-	${({ $cells }: { $cells: number }) =>
+	${({ $cells }) =>
     ($cells === 1 && "extend-event-l-1") ||
     ($cells === 2 && "extend-event-l-2") ||
     ($cells === 3 && "extend-event-l-3") ||
@@ -77,5 +74,5 @@ export const TWplaceholder = tw.div`
 `;
 
 export const TWStyledSelect = tw.select`
-  border-none py-px padding-x-clamp button-shadow text-effect rounded-sm cursor-pointer outline-none text-white
+  border-none py-px padding-x-clamp button-shadow text-effect rounded-sm cursor-pointer outline-none
 `;
diff --git a/src/components/EventsThrower/main.tsx b/src/components/EventsThrower/main.tsx
index f4193ac..465df28 100644
--- a/src/components/EventsThrower/main.tsx
+++ b/src/components/EventsThrower/main.tsx
@@ -1,7 +1,7 @@
-import { Event, EventHolder, EventOff } from "@/components/Event/main";
+import { Event, EventHolder } from "@components/Event/main";
 import { useEventState } from "@/hooks/useEventsState";
-import { bubblingAlgo } from "@/components/EventsThrower/bubblingAlgoUtils";
-import { sendEndReferencesToPlaceholders } from "@/components/EventsThrower/sendReferencesToPlaceholders";
+import { bubblingAlgo } from "@components/EventsThrower/bubblingAlgoUtils";
+import { sendEndReferencesToPlaceholders } from "@components/EventsThrower/sendReferencesToPlaceholders";
 import { isPlaceholder, isValidPlaceholder } from "@/utils/ValidateEvent";
 import { memo, useEffect, useLayoutEffect } from "react";
 import { DateService } from "@/utils/Date";
@@ -20,18 +20,24 @@ export const EventsThrower: React.FC<EventProps> = ({
   const weekRange = DateService.GetWeekRangeOf(day);
   const eventsOfWeek = useEventState(weekRange);
   const componentName = "Eventthrown";
+  //TODO: rebuild isLocked day const isLocked = lockedDays.find((lock) => lock === day) === day;
+  const isLocked = false;
+  //No events in a day fast exit
 
-  //TODO: style height has be passed from eventRef
+  const sortedEvents = bubblingAlgo(dayEvents);
+  //const sortedEvents = dayEvents;
 
-  //Day off
+  useLayoutEffect(() => {
+    if (dayEvents.length === 0 || isLocked) {
+      return;
+    }
+  });
 
-  const dayOff = dayEvents.find((event) => event.client === "Unavailable");
-  //dayOff!.mutable!.index = 0;
-  const isLocked =
-    typeof dayOff !== "undefined" && dayOff.client.includes("Unavailable");
+  //TODO: style height has be passed from eventRef
 
-  const dayEventsFiltered = isLocked ? [dayOff] : dayEvents;
-  const sortedEvents = bubblingAlgo(dayEventsFiltered);
+  if (dayEvents.length === 0 || isLocked) {
+    return <></>;
+  }
 
   return (
     <div className="flex flex-col gap-1 my-5">
diff --git a/src/components/Login/main.tsx b/src/components/Login/main.tsx
index ffbd85e..fa9ed6c 100644
--- a/src/components/Login/main.tsx
+++ b/src/components/Login/main.tsx
@@ -1,19 +1,27 @@
-import { TWloginButton, TWloginForm, TWloginInput, TWloginWrapper } from "./tw";
+import { useUserSession } from "@/hooks/useUserSession";
 import { useEffect } from "react";
 import { useForm } from "react-hook-form";
+import { TWloginButton, TWloginForm, TWloginInput, TWloginWrapper } from "./tw";
 import { useListenWindowSize } from "@/hooks/useResponsiveLayout";
-import { clearLogin, fetchLogin } from "@/window/fetch";
 
 export default function Login() {
-  const { register, handleSubmit, formState } = useForm();
-  const isLargeWindow = useListenWindowSize();
+  const {
+    register,
+    handleSubmit,
+    formState: { errors },
+  } = useForm();
+
+  const { fetchLogin, clearLoginSession } = useUserSession();
 
   useEffect(() => {
-    clearLogin();
+    clearLoginSession();
   }, []);
 
+  const isLargeWindow = useListenWindowSize();
+
   const onSubmitLogin = (payload: any) => {
     //TODO: fix any, understand handleSubmit
+    //fakeLogin(payload);
     if (document.fullscreenEnabled && !isLargeWindow) {
       document.documentElement.requestFullscreen().then((res) => {
         fetchLogin(payload);
@@ -41,8 +49,8 @@ export default function Login() {
         <TWloginButton type="submit" value="Login">
           Login{" "}
         </TWloginButton>
-        {formState.errors.user && <p>User is required.</p>}
-        {formState.errors.password && <p>Password is required.</p>}
+        {errors.user && <p>User is required.</p>}
+        {errors.password && <p>Password is required.</p>}
       </TWloginForm>
     </TWloginWrapper>
   );
diff --git a/src/components/Month/MonthToScrollBack.tsx b/src/components/Month/MonthToScrollBack.tsx
index b780eac..a23baca 100644
--- a/src/components/Month/MonthToScrollBack.tsx
+++ b/src/components/Month/MonthToScrollBack.tsx
@@ -1,8 +1,8 @@
 import { useEffect, useLayoutEffect, useState } from "react";
-import { useCtxCurrentMonthRef } from "@/context/currentMonthReference";
+import { useCtxCurrentMonthRef } from "@/globalStorage/currentMonthReference";
 import { isToday, _renderDate } from "@/utils/Date_v2";
-import { useCtxTopNavRef } from "@/context/topNavSize";
-import { DOMRefs } from "@/context/DOMRefs";
+import { useCtxTopNavRef } from "@/globalStorage/topNavSize";
+import { DOMRefs } from "@/globalStorage/DOMRefs";
 import { CustomTypes } from "@/customTypes";
 export const CurrentMonthScrollAnchor = ({
   year,
diff --git a/src/components/Month/main.tsx b/src/components/Month/main.tsx
index 0e1b7d8..dc455dd 100644
--- a/src/components/Month/main.tsx
+++ b/src/components/Month/main.tsx
@@ -1,7 +1,7 @@
 import { memo } from "react";
 import { useMonthDate } from "@/hooks/useMonthDate";
-import { MemoDay } from "@/components/Day/main";
-import { MemoIDayHolder } from "@/components/DayHolder/main";
+import { MemoDay } from "@components/Day/main";
+import { MemoIDayHolder } from "@components/DayHolder/main";
 import * as StyledMonth from "./tw";
 import { DateService } from "@/utils/Date";
 
diff --git a/src/components/Month/tw.tsx b/src/components/Month/tw.tsx
index 7d3d371..4ac9d24 100644
--- a/src/components/Month/tw.tsx
+++ b/src/components/Month/tw.tsx
@@ -11,7 +11,7 @@ print:mt-10
 print:shadow-none
 
 
-${({ $toPrint }: { $toPrint: boolean }) => (!$toPrint && "print:hidden") || ""}
+${({ $toPrint }) => (!$toPrint && "print:hidden") || ""}
 `;
 
 // The header displays a text as: month year, like February 2022
@@ -20,7 +20,7 @@ flex justify-center
 sticky sm:top-9 customtp:top-6 custombp:top-6 z-TopLayer
 print:static
 print:align-middle
-font-normal
+font-medium
 text-black
 px-[2ch] border-b-2 border-slate-400 
 bg-gradient-to-r from-slate-200 via-slate-50 to-slate-200
@@ -42,7 +42,7 @@ export const TWdaysBoard = tw.div`
 // Shifts the day where a month starts
 export const TWdayShift = tw.div<{ $weekday: string }>`
 
-${({ $weekday }: { $weekday: string }) =>
+${({ $weekday }) =>
   ($weekday === "mon" && "month-start-mon") ||
   ($weekday === "tue" && "month-start-tue") ||
   ($weekday === "wed" && "month-start-wed") ||
diff --git a/src/components/Topnav/main.tsx b/src/components/Topnav/main.tsx
index 1cddb06..4741e68 100644
--- a/src/components/Topnav/main.tsx
+++ b/src/components/Topnav/main.tsx
@@ -1,23 +1,22 @@
 import { DateService } from "@/utils/Date";
+import { useToken } from "@/hooks/useToken";
 import * as StyledTopnav from "./tw";
-import { useCtxCurrentMonthRef } from "@/context/currentMonthReference";
-import { useCtxTopNavRef } from "@/context/topNavSize";
+import { useCtxCurrentMonthRef } from "@/globalStorage/currentMonthReference";
+import { useCtxTopNavRef } from "@/globalStorage/topNavSize";
 import { useEffect } from "react";
-import { DOMRefs } from "@/context/DOMRefs";
+import { DOMRefs } from "@/globalStorage/DOMRefs";
 import { useCleanSession } from "@/hooks/useCleanSession";
-import { useUserSession } from "@/hooks/useUserSession";
 
 export const TOPNAV_ID = "Topnav";
 
 export const Topnav = () => {
-  console.log("Rendering TopNav");
-  const token = useUserSession();
-  const user = token.data().usr;
+  const token = useToken();
+  const user = token.user();
   const topNavRef = useCtxTopNavRef();
   const dispatchDOMRef = DOMRefs.useDispatch();
 
   //Custom hook to clean session, gives a handler to set to true when session is to clean
-  const cleanSession = useCleanSession();
+  const setSessionIsToClean = useCleanSession();
 
   const monthRef = useCtxCurrentMonthRef();
 
@@ -42,7 +41,7 @@ export const Topnav = () => {
         title={"Cleans up your session token | Ctrl+Alt+q"}
         onClick={(evt) => {
           evt.stopPropagation();
-          cleanSession();
+          setSessionIsToClean(true);
         }}
       >
         {token.isValid() ? "Logout" : "Sign in"}
diff --git a/src/components/Topnav/tw.tsx b/src/components/Topnav/tw.tsx
index 4f86b78..c5dd99a 100644
--- a/src/components/Topnav/tw.tsx
+++ b/src/components/Topnav/tw.tsx
@@ -1,7 +1,7 @@
 import tw from "tailwind-styled-components";
 
 export const TWcontainer = tw.div`
-	bg-slate-900 font-normal sm:text-lg custombp:text-xs customtp:text-xs flex justify-between items-center
+	bg-slate-900 sm:font-extrabold sm:text-lg font-extrabold custombp:text-xs customtp:text-xs flex justify-between items-center
 	print:hidden
 `;
 
diff --git a/src/context/dndEventRef.tsx b/src/context/dndEventRef.tsx
deleted file mode 100644
index 75bb596..0000000
--- a/src/context/dndEventRef.tsx
+++ /dev/null
@@ -1,36 +0,0 @@
-import { createContext, useContext, useState } from "react";
-import { composition, event } from "@/interfaces";
-import { nullEvent } from "@/customTypes";
-
-const cDnDEventRef = createContext<event>(nullEvent());
-const cSetDnDEventRef = createContext((event: event) => {
-  return;
-});
-
-cDnDEventRef.displayName = "Selected Event: value";
-
-export const useDnDEventRef = () => {
-  return useContext(cDnDEventRef);
-};
-export const useSetDnDEventRef = () => {
-  return useContext(cSetDnDEventRef);
-};
-
-export const EventInDnD: composition = (propTypes) => {
-  const [dndEvent, setDnDEvent] = useState(nullEvent());
-  const setDnDEventRef = (event: event) => {
-    if (typeof event.mutable === "object") {
-      setDnDEvent({ ...event, mutable: { ...event.mutable } });
-    } else {
-      setDnDEvent({ ...event });
-    }
-  };
-
-  return (
-    <cDnDEventRef.Provider value={dndEvent}>
-      <cSetDnDEventRef.Provider value={setDnDEventRef}>
-        {propTypes.children}
-      </cSetDnDEventRef.Provider>
-    </cDnDEventRef.Provider>
-  );
-};
diff --git a/src/customTypes.ts b/src/customTypes.ts
index 5f02090..6c607bf 100644
--- a/src/customTypes.ts
+++ b/src/customTypes.ts
@@ -1,4 +1,4 @@
-import { encodedTokenFromAPI, event, token, tokenData } from "./interfaces";
+import { event } from "./interfaces";
 
 export namespace CustomTypes {
   /**
@@ -20,11 +20,7 @@ export namespace CustomTypes {
     | "syncDB"
     | "delete"
     | "update"
-    | "override"
-    | "changeId"
-    | "unmount"
-    | "tonull"
-    | "fromnull";
+    | "override";
 
   /**
    * Options to send a query by POST method using fetch to Backend API events
@@ -44,24 +40,15 @@ export namespace CustomTypes {
   };
 }
 
-//TODO: create a factory to automate instantiation inside functions by declaring the type
-/**
- * A constant that stores an event that is considered null by any consumer
- */
-export const nullEvent = (): event => ({
-  id: 0,
-  client: "",
-  job: "",
-  start: "",
-  end: "",
-});
-
-// Create new instances each time a nullToken is required
-// it prevents againts sharing multiple instances of same object in different parts of the code
-export const nullToken = (): token => ({
-  exp: 0,
-  aud: "",
-  data: { iss: "", uid: "", usr: "", aut: "", rus: "" },
-});
-
-export const nullEncodedToken = (): encodedTokenFromAPI => ({ data: "" });
+export namespace CustomValues {
+  /**
+   * A constant that stores an event that is considered null by any consumer
+   */
+  export const nullEvent: event = {
+    id: 0,
+    client: "",
+    job: "",
+    start: "",
+    end: "",
+  };
+}
diff --git a/src/context/DOMRefs.tsx b/src/globalStorage/DOMRefs.tsx
similarity index 71%
rename from src/context/DOMRefs.tsx
rename to src/globalStorage/DOMRefs.tsx
index bec0710..92796e2 100644
--- a/src/context/DOMRefs.tsx
+++ b/src/globalStorage/DOMRefs.tsx
@@ -12,9 +12,6 @@ const defaultState: State = [];
 const State = createContext<State>(defaultState);
 const Dispatcher = createContext<React.Dispatch<Action>>(() => {});
 
-State.displayName = "DOM Refs state";
-Dispatcher.displayName = "DOM Refs dispatcher";
-
 export namespace DOMRefs {
   //State Context
   export function useState() {
@@ -25,16 +22,16 @@ export namespace DOMRefs {
     return useContext(Dispatcher);
   }
   //Context Provider
-}
-export const DOMRefsContext: composition = ({ children }) => {
-  const [state, dispatch] = useReducer(reducer, defaultState);
+  export const Context: composition = ({ children }) => {
+    const [state, dispatch] = useReducer(reducer, defaultState);
 
-  return (
-    <State.Provider value={state}>
-      <Dispatcher.Provider value={dispatch}>{children}</Dispatcher.Provider>
-    </State.Provider>
-  );
-};
+    return (
+      <State.Provider value={state}>
+        <Dispatcher.Provider value={dispatch}>{children}</Dispatcher.Provider>
+      </State.Provider>
+    );
+  };
+}
 //Reducer
 /*
  * action: {type:"update",payload:"HTMLDiv ref"}
diff --git a/src/context/currentMonthReference.tsx b/src/globalStorage/currentMonthReference.tsx
similarity index 100%
rename from src/context/currentMonthReference.tsx
rename to src/globalStorage/currentMonthReference.tsx
diff --git a/src/context/eventSelected.tsx b/src/globalStorage/eventSelected.tsx
similarity index 100%
rename from src/context/eventSelected.tsx
rename to src/globalStorage/eventSelected.tsx
diff --git a/src/context/keyBuffer.tsx b/src/globalStorage/keyBuffer.tsx
similarity index 100%
rename from src/context/keyBuffer.tsx
rename to src/globalStorage/keyBuffer.tsx
diff --git a/src/context/temporaryEvents.tsx b/src/globalStorage/temporaryEvents.tsx
similarity index 82%
rename from src/context/temporaryEvents.tsx
rename to src/globalStorage/temporaryEvents.tsx
index d25b3e8..69daa96 100644
--- a/src/context/temporaryEvents.tsx
+++ b/src/globalStorage/temporaryEvents.tsx
@@ -1,11 +1,11 @@
-import { nullEvent } from "@/customTypes";
 import { composition } from "@/interfaces";
 import { createContext, useContext, useState } from "react";
+import { CustomValues } from "@/customTypes";
 
 //Template param: StateName
 
 //1. Choose your state
-const defaultState = nullEvent();
+const defaultState = CustomValues.nullEvent;
 
 const defaultDispaatcher: React.Dispatch<
   React.SetStateAction<typeof defaultState>
@@ -14,9 +14,6 @@ const defaultDispaatcher: React.Dispatch<
 const cTemporaryEvent = createContext(defaultState);
 const cTemporaryEventDispatcher = createContext(defaultDispaatcher);
 
-cTemporaryEvent.displayName = "Temporary Event State";
-cTemporaryEventDispatcher.displayName = "Temporary Event Dispatcher";
-
 //2. State consumers
 export const useTemporaryEvent = () => {
   return useContext(cTemporaryEvent);
diff --git a/src/context/topNavSize.tsx b/src/globalStorage/topNavSize.tsx
similarity index 100%
rename from src/context/topNavSize.tsx
rename to src/globalStorage/topNavSize.tsx
diff --git a/src/hooks/templates/counter.ts b/src/hooks/templates/counter.ts
deleted file mode 100644
index dda5165..0000000
--- a/src/hooks/templates/counter.ts
+++ /dev/null
@@ -1,9 +0,0 @@
-import { useState, useCallback } from "react";
-
-export function useCounter() {
-  const [count, setCount] = useState(0);
-
-  const increment = useCallback(() => setCount((x) => x + 1), []);
-
-  return { count, increment };
-}
diff --git a/src/hooks/useCleanSession.ts b/src/hooks/useCleanSession.ts
index d33ca24..3930a23 100644
--- a/src/hooks/useCleanSession.ts
+++ b/src/hooks/useCleanSession.ts
@@ -1,41 +1,39 @@
-import { useCallback } from "react";
-import { clearLogin } from "@/window/fetch";
-import { useSetEventSelected } from "@/context/eventSelected";
-import { useControllerDispatch } from "@/hooks/useController";
-import { useControllerDispatchDates } from "@/hooks/useControllerDate";
-import { useEventDispatch } from "./useEventsState";
-import { nullEvent } from "@/customTypes";
+import { useSetEventSelected } from "@/globalStorage/eventSelected";
+import { useEffect, useState } from "react";
+import { useControllerDispatch } from "./useController";
+import { useControllerDispatchDates } from "./useControllerDate";
+import { useUserSession } from "./useUserSession";
 
 // This is the reference hook to clean te entire memory,
 // any component should consume this to clear temporary states
 // Eventually this will grow up, to host clear options,
 // so the useState hook will be interchanged by useReducer
 export const useCleanSession = () => {
+  const [isToClean, setIsToClean] = useState(false);
+
+  const setSession = useUserSession();
+
   const setEventController = useSetEventSelected();
   const dispatchController = useControllerDispatch();
   const dispatchControllerDates = useControllerDispatchDates();
-  const dispatchEvent = useEventDispatch();
-
-  const cleanContextState = useCallback(() => {
-    clearLogin();
+  useEffect(() => {
+    if (!isToClean) {
+      return;
+    }
 
+    setSession.clearLoginSession();
     setEventController(null);
 
     dispatchController({
       type: "setController",
       payload: { id: 0, client: "", job: "" },
     });
-
     dispatchControllerDates({
       type: "clearDates",
     });
 
-    dispatchEvent({
-      type: "unmount",
-      payload: [nullEvent()],
-      callback: () => {},
-    });
-  }, []);
+    setIsToClean(false);
+  }, [isToClean]);
 
-  return cleanContextState;
+  return setIsToClean;
 };
diff --git a/src/hooks/useControllerDate.tsx b/src/hooks/useControllerDate.tsx
index 725e34f..8c0767c 100644
--- a/src/hooks/useControllerDate.tsx
+++ b/src/hooks/useControllerDate.tsx
@@ -6,9 +6,6 @@ const init = { start: "", end: "" };
 const cControllerState = createContext(init);
 const cControllerDispatch = createContext<React.Dispatch<Action>>(() => {});
 
-cControllerState.displayName = "controller state dates";
-cControllerDispatch.displayName = "controller dispatch dates";
-
 /* to consume in controller and other  components that wants to dispatch to controller */
 export const useControllerStateDates = () => useContext(cControllerState);
 export const useControllerDispatchDates = () => useContext(cControllerDispatch);
diff --git a/src/hooks/useEventsState.tsx b/src/hooks/useEventsState.tsx
index 349e789..11e058e 100644
--- a/src/hooks/useEventsState.tsx
+++ b/src/hooks/useEventsState.tsx
@@ -15,10 +15,6 @@ import { eventSpreader } from "@/algorithms/eventSpreader";
 import { isWellDefined } from "@/utils/ValidateEvent";
 import { CustomTypes } from "@/customTypes";
 import { DateService } from "@/utils/Date";
-import { EventClass } from "@/classes/event";
-import { copyFileSync } from "fs";
-
-const DEFERRAL_TIME = 0;
 
 export type Action = {
   type: CustomTypes.DispatchLocalStateEvents;
@@ -142,7 +138,7 @@ export function reducerEvents(
       const daysToPush = diffStates(state, newState);
       setTimeout(() => {
         action.callback(daysToPush);
-      }, DEFERRAL_TIME);
+      }, 0);
       return newState;
     }
     //
@@ -167,10 +163,11 @@ export function reducerEvents(
       });
 
       newState.sort((prev, next) => sortCriteria(prev, next));
+      diffStates(state, newState);
       const daysToPush = diffStates(state, newState);
       setTimeout(() => {
         action.callback(daysToPush);
-      }, DEFERRAL_TIME);
+      }, 0);
       return newState;
     }
     //
@@ -186,7 +183,7 @@ export function reducerEvents(
       const daysToPush = diffStates(state, newState);
       setTimeout(() => {
         action.callback(daysToPush);
-      }, DEFERRAL_TIME);
+      }, 0);
       return newState;
     }
     //
@@ -214,86 +211,6 @@ export function reducerEvents(
       result.sort((prev, next) => sortCriteria(prev, next));
       return result;
     }
-
-    case "changeId": {
-      const origin = action.payload[0];
-
-      //Deep-cloning the array ref and the objects inside removing the origin
-      const newState = state
-        .filter((event) => Math.abs(event.id) !== Math.abs(origin.id))
-        .map((event) => {
-          return { ...event };
-        });
-
-      //Scape if there is no temp event
-      const target = newState.find((event) => event.id === 123456789);
-      if (!target) {
-        return state;
-      }
-
-      target.id = action.payload[0].id;
-
-      //      const index = newState.findIndex((event) => event.id === 123456789);
-      //      const toOverride = state[index];
-      //      console.log(action.payload[0]);
-      //      toOverride.id = action.payload[0].id;
-      //      console.log(toOverride);
-
-      return newState;
-    }
-
-    case "tonull": {
-      const origin = action.payload[0];
-
-      //Deep-cloning the array ref and the objects inside removing the origin
-      const newState = state
-        .filter((event) => Math.abs(event.id) !== Math.abs(origin.id))
-        .map((event) => {
-          return { ...event };
-        });
-
-      //Scape if there is no temp event
-      const target = newState.find((event) => event.id === origin.id);
-      if (!target) {
-        return state;
-      }
-
-      target.id = action.payload[0].id;
-
-      //      const index = newState.findIndex((event) => event.id === 123456789);
-      //      const toOverride = state[index];
-      //      console.log(action.payload[0]);
-      //      toOverride.id = action.payload[0].id;
-      //      console.log(toOverride);
-
-      return newState;
-    }
-
-    //Overrides whatever is in null with the payload
-    case "fromnull": {
-      const toReplace = action.payload[0];
-      const cleanState = state.filter((event) => event.id !== 0);
-
-      //State before and after cleaning is the same, event is not in state so won't add
-      const affectedEvents = state.length - cleanState.length;
-      if (affectedEvents === 0) {
-        return [...state];
-      }
-
-      //Recompute the new representation of that event
-      const spread = eventSpreader(toReplace);
-
-      //Append to previous cleaned state
-      const result = [...cleanState, toReplace, ...spread];
-
-      //Sort again
-      result.sort((prev, next) => sortCriteria(prev, next));
-      return result;
-    }
-
-    case "unmount": {
-      return [];
-    }
   }
 }
 
@@ -306,7 +223,6 @@ const cEventDispatch = createContext<React.Dispatch<Action>>(() => {});
 
 cEventState.displayName = "Event State: a interpretation of database events";
 cEventBuffer.displayName = "Event Buffer: a temporal state";
-cBufferDispatch.displayName = "Event Buffer dispatch";
 cEventDispatch.displayName = "Event State Dispatch";
 
 export function useEventState(day?: string | { from: string; to: string }) {
@@ -330,19 +246,6 @@ export function useEventDispatch() {
   return useContext(cEventDispatch);
 }
 
-//A children custom hook of useEventState
-export function useGetEventFamily(event: event) {
-  const events = useEventState();
-  const parentId = EventClass.transformToParentId(event);
-  //return all events that has the same parentId
-  const family = events.filter(
-    (e) => EventClass.transformToParentId(e) === parentId
-  );
-
-  const parent = EventClass.getParentEvent(family);
-  return [parent, family] as [event, Array<event>];
-}
-
 // Context Dispatcher of Event Reducer
 
 export const EventsDispatcher: composition = ({ children }) => {
@@ -364,7 +267,7 @@ export const EventsDispatcher: composition = ({ children }) => {
 const useFetchEvents = () => {};
 //export function fetchEvent_v2(
 //  action: CustomTypes.OptionsEventsAPI,
-//  event: event = nullEvent();
+//  event: event = CustomValues.nullEvent
 //): Promise<Array<event>> {
 //  const method = "POST"; //https method, nothing to do with action
 //  const body = new FormData();
diff --git a/src/hooks/useEventsStatus.tsx b/src/hooks/useEventsStatus.tsx
index 40ad6a1..5ab6718 100644
--- a/src/hooks/useEventsStatus.tsx
+++ b/src/hooks/useEventsStatus.tsx
@@ -9,8 +9,6 @@ const defaultDispatcher = (newValue: number) => {};
 
 const cEventsStatus = createContext(defaultState);
 const cEventsStatusDispatcher = createContext(defaultDispatcher);
-cEventsStatus.displayName = "Event Status";
-cEventsStatusDispatcher.displayName = "Event Status Dispatcher";
 
 export const useEventsStatus = () => {
   return useContext(cEventsStatus);
diff --git a/src/hooks/useFetchEvents.ts b/src/hooks/useFetchEvents.ts
index 5f034c8..a09faa7 100644
--- a/src/hooks/useFetchEvents.ts
+++ b/src/hooks/useFetchEvents.ts
@@ -1,5 +1,5 @@
 import { useEffect } from "react";
-import { apifetch } from "@/utils/Fetch";
+import { apifetch } from "@utils/Fetch";
 import { event } from "@/interfaces";
 //import { useEventsReducer } from "../context/DispatchEvents";
 
diff --git a/src/hooks/useIsDragging.tsx b/src/hooks/useIsDragging.tsx
index e17f3dd..b7ec32d 100644
--- a/src/hooks/useIsDragging.tsx
+++ b/src/hooks/useIsDragging.tsx
@@ -1,45 +1,25 @@
 import { composition } from "@/interfaces";
-import { createContext, useContext, useState } from "react";
-import PropTypes from "prop-types";
-
+import React, { createContext, useContext, useState } from "react";
 type IsDragginType = {
-  isDragging: boolean;
-  setIsDragging: (_value: boolean) => void;
-};
-
-const defaultValue = {
-  isDragging: false,
-  setIsDragging: (value: boolean) => {
-    return value;
-  },
+  state: boolean;
+  setState: React.Dispatch<React.SetStateAction<boolean>>;
 };
 
-const context = createContext<IsDragginType>(defaultValue);
-context.displayName = "Is Dragging";
-
-export namespace Context {
-  export const useIsDragging = () => useContext(context);
-}
+const cIsDragging = createContext<IsDragginType>({
+  state: false,
+  setState: () => {},
+});
 
-const useIsDragging = () => {
-  const [isDragging, setIsDragging] = useState(false);
-
-  return { isDragging, setIsDragging };
+export const useIsDragging = () => {
+  return useContext(cIsDragging);
 };
 
-// check react prop-types out: https://reactjs.org/docs/typechecking-with-proptypes.html
-const IsDraggingEvent: composition = (propTypes) => {
-  const { isDragging, setIsDragging } = useIsDragging();
+export const IsDraggingEvent: composition = ({ children }) => {
+  const [state, setState] = useState(false);
 
   return (
-    <context.Provider value={{ isDragging, setIsDragging }}>
-      {propTypes.children}
-    </context.Provider>
+    <cIsDragging.Provider value={{ state, setState }}>
+      {children}
+    </cIsDragging.Provider>
   );
 };
-
-IsDraggingEvent.propTypes = {
-  children: PropTypes.element.isRequired,
-};
-
-export { IsDraggingEvent };
diff --git a/src/hooks/useIsFetchingEvents.tsx b/src/hooks/useIsFetchingEvents.tsx
index 3a7e5c7..2a5ac61 100644
--- a/src/hooks/useIsFetchingEvents.tsx
+++ b/src/hooks/useIsFetchingEvents.tsx
@@ -11,8 +11,6 @@ const cIsFetchingEvents = createContext<IsFetchingType>({
   setIsFetching: () => {},
 });
 
-cIsFetchingEvents.displayName = "Is Fetching Events";
-
 export const useIsFetchingEvents = () => {
   return useContext(cIsFetchingEvents);
 };
diff --git a/src/hooks/useKeyListeners.ts b/src/hooks/useKeyListeners.ts
index 048ae11..9e798ef 100644
--- a/src/hooks/useKeyListeners.ts
+++ b/src/hooks/useKeyListeners.ts
@@ -1,9 +1,9 @@
 import { useEffect } from "react";
 import { useControllerDispatch } from "@/hooks/useController";
 
-import { useGethCancel } from "@/api/handlers";
-import { useCtxKeyBufferDispatcher } from "@/context/keyBuffer";
-import { useEventSelected } from "@/context/eventSelected";
+import { useGethCancel, useGethDeleteEvent } from "@/api/handlers";
+import { useCtxKeyBufferDispatcher } from "@/globalStorage/keyBuffer";
+import { useEventSelected } from "@/globalStorage/eventSelected";
 
 export const useKeyboardShortcuts = () => {
   const dispatchKeyBuffer = useCtxKeyBufferDispatcher();
@@ -12,9 +12,12 @@ export const useKeyboardShortcuts = () => {
   const dispatchController = useControllerDispatch();
 
   const hCancel = useGethCancel();
+  const hDelete = useGethDeleteEvent();
   useEffect(() => {
     const hOnKeyDown = (e: KeyboardEvent) => {
-      if (e.key === "Escape") {
+      if (eventSelected && e.key === "Delete") {
+        hDelete();
+      } else if (e.key === "Escape") {
         hCancel();
       } else if (e.key === "Control") {
         dispatchKeyBuffer(e.key);
diff --git a/src/hooks/useLocalUserPreferences.tsx b/src/hooks/useLocalUserPreferences.tsx
index 184df4e..fc343df 100644
--- a/src/hooks/useLocalUserPreferences.tsx
+++ b/src/hooks/useLocalUserPreferences.tsx
@@ -58,8 +58,6 @@ const cUseLocalUserPreferences = createContext({
   dispatchLocalState: dispatch,
 });
 
-cUseLocalUserPreferences.displayName = "Local User Preferences";
-
 export const useLocalUserPreferencesContext = () => {
   return useContext(cUseLocalUserPreferences);
 };
diff --git a/src/hooks/usePushDays.tsx b/src/hooks/usePushDays.tsx
index 1aacbd0..6e97329 100644
--- a/src/hooks/usePushDays.tsx
+++ b/src/hooks/usePushDays.tsx
@@ -1,4 +1,4 @@
-import { composition, event } from "@/interfaces";
+import { composition } from "@/interfaces";
 import { createContext, Dispatch, useContext, useState } from "react";
 import { CustomTypes } from "@/customTypes";
 
@@ -7,10 +7,8 @@ export type Action = {
   payload: CustomTypes.State;
 };
 
-const defaultPushDates: Set<event.date> = new Set();
-const defaultPushDatesDispatcher: Dispatch<Set<event.date>> = {} as Dispatch<
-  Set<event.date>
->;
+const defaultPushDates: Set<string> = new Set();
+const defaultPushDatesDispatcher: Dispatch<Set<string>> = () => {};
 
 const cPushDates = createContext(defaultPushDates);
 const cPushDatesDispatcher = createContext(defaultPushDatesDispatcher);
@@ -25,14 +23,14 @@ export const usePushedDaysDispatcher = () => {
   return useContext(cPushDatesDispatcher);
 };
 
-export const PushedDays: composition = (Props) => {
+export const PushedDays: composition = ({ children }) => {
   //const [state, dispatch] = useReducer(reducerEvents, defaultState);
-  const [days, dispatchDays] = useState<Set<event.date>>(new Set());
+  const [days, dispatchDays] = useState<Set<string>>(new Set());
 
   return (
     <cPushDates.Provider value={days}>
       <cPushDatesDispatcher.Provider value={dispatchDays}>
-        {Props.children}
+        {children}
       </cPushDatesDispatcher.Provider>
     </cPushDates.Provider>
   );
diff --git a/src/hooks/useToken.ts b/src/hooks/useToken.ts
index bad5410..bec65f2 100644
--- a/src/hooks/useToken.ts
+++ b/src/hooks/useToken.ts
@@ -1,31 +1,33 @@
-//*	useToken, commited at April 27, 2022
-//
-//	is a long-polling service reading from window.document.cookie a valid token
-//	it exposes the class Token wich has some public methods to access data from token
-//
-
 import { Token } from "@/classes/token";
 import { useEffect, useState } from "react";
 
 export const useToken = () => {
-  const [token, setToken] = useState(() => new Token());
+  const [token, setToken] = useState(Token.getToken());
+  //
+  const updateTokenIfChangesNameOrValidity = () => {
+    const currentToken = Token.getToken();
+    if (!currentToken.isSamePerson(token)) {
+      setToken(currentToken);
+    }
+    if (!currentToken.isValid()) {
+      setToken(Token.nullToken); //this is not needed as the component will unmount
+    }
+  };
 
-  // This effect long polling keep track of a valid token and the user name of the current token
+  // This effect long polling keep track of a valid token
   useEffect(() => {
-    //Update Token when: user changes | token expires
-    const updateToken = () => {
-      const current = new Token();
-      const userChanged = !current.isSameUser(token);
-      const tokenGetInvalid = token.isValid() && !current.isValid();
-      if (userChanged || tokenGetInvalid) {
-        setToken(current);
-      }
-    };
-
-    const intervalId = setInterval(updateToken, 1000);
+    let intervalId: NodeJS.Timeout;
+    intervalId = setInterval(updateTokenIfChangesNameOrValidity, 1000);
     return () => {
       clearInterval(intervalId);
     };
+  }, []);
+
+  useEffect(() => {
+    if (!token.isValid()) {
+      window.alert("Expired Credentials");
+      //setSessionIsToClean(true);
+    }
   }, [token]);
 
   return token;
diff --git a/src/hooks/useUserSession.tsx b/src/hooks/useUserSession.tsx
index af8b1b9..aa13fa4 100644
--- a/src/hooks/useUserSession.tsx
+++ b/src/hooks/useUserSession.tsx
@@ -1,26 +1,103 @@
-//*	useUserSession, commited at April 28, 2022
-//
-//	Context provider for useToken custom hook,
-//	just wraps the boilerplate around react context
-//
-
-import { useContext, createContext } from "react";
-import { composition } from "@/interfaces";
-import { useToken } from "./useToken";
+import { useState, useContext, createContext } from "react";
+import { composition, loginForm } from "@/interfaces";
+import { api } from "@/static/apiRoutes";
 import { Token } from "@/classes/token";
 
-// * Create and export context
-const cUserSession = createContext(Token.null());
-cUserSession.displayName = "Context: User Session";
+// * 1. Create context: Logged
 
+const isUserLogged: boolean = false;
+const isUserLoggedDispatcher: (update: boolean) => void = () => {};
+//const fakeLogin: (payload: SubmitHandler<FieldValues>) => void = () => {};
+//const fetchLogin: (payload: SubmitHandler<FieldValues>) => void = () => {};
+const clearLoginSession: () => void = () => {};
+const fetchLogin: (payload: any) => void = () => {};
+
+const cUserSession = createContext({
+  isUserLogged,
+  isUserLoggedDispatcher,
+  fetchLogin,
+  clearLoginSession,
+});
+
+// * 2. Export context handler
+
+// * dep: src/App.tsx:											uses the value to decide wether to render <Login> or <Calendar>
+// * dep: src/components/Topnav/main.tsx:		uses the dispatcher to close the session
+// * dep: src/pages/Login/Login.tsx:				uses the dispatcher to open the session
 export function useUserSession() {
   return useContext(cUserSession);
 }
 
-// * Create and export provider
+// * 3. Export context component
+
+// * dep: src/main.tsx
 export const UserSession: composition = ({ children }) => {
-  const token = useToken();
+  const [isUserLogged, setIsLogged] = useState(Token.getToken().isValid());
+
+  // * Dispatcher closure wrapping setState:
+  // * case dispatch true:	updates login status
+  // * case dispatch false:	updates login status and clear all cookies coming from login api
+  const isUserLoggedDispatcher = (value: boolean) => {
+    setIsLogged(() => {
+      !value && deleteSession();
+      return value;
+    });
+  };
+
+  const fetchLogin = (payload: any) => {
+    const data = new FormData();
+    data.append("json", JSON.stringify(payload));
+
+    fetch(api.routes.login, {
+      method: "POST",
+      body: data,
+    })
+      .then((res) => {
+        if (res.status !== 201) {
+          throw Error(`Error code: ${res.status}`);
+        }
+      })
+      .catch(() => {
+        deleteSession();
+      })
+      .finally(() => {
+        isUserLoggedDispatcher(Token.getToken().isValid());
+      });
+  };
+
+  const clearLoginSession = () => {
+    const nullForm: loginForm = { user: "", password: "" };
+    fetchLogin(nullForm);
+  };
+
   return (
-    <cUserSession.Provider value={token}>{children}</cUserSession.Provider>
+    <cUserSession.Provider
+      value={{
+        isUserLogged,
+        isUserLoggedDispatcher,
+        fetchLogin,
+        clearLoginSession,
+      }}
+    >
+      {children}
+    </cUserSession.Provider>
   );
 };
+
+/**
+ * Side effect function to remove cookies emmited by the server, targets:
+ * - PHPSESSIONID
+ * - Hashed Token
+ */
+function deleteSession() {
+  const recoveredCookies: Array<string> = window.document.cookie.split(";");
+  const cookiesWithExpirationDateAttached = recoveredCookies.map((cookie) => {
+    return `${cookie
+      .trimStart()
+      .trimEnd()} ;expires=Thu, 01 Jan 1970 00:00:01 GMT`;
+  });
+
+  cookiesWithExpirationDateAttached.forEach((expiredCookie) => {
+    window.document.cookie = expiredCookie;
+  });
+}
diff --git a/src/index.css b/src/index.css
index f19eec7..5bfaf77 100644
--- a/src/index.css
+++ b/src/index.css
@@ -36,12 +36,9 @@
   .text-event {
     cursor: grab !important; /* the way I find to */
   }
-  .extend-event-e {
+  .extend-event {
     cursor: e-resize !important; /* the way I find to */
   }
-  .extend-event-w {
-    cursor: w-resize !important; /* the way I find to */
-  }
 }
 
 @layer utilities {
@@ -77,52 +74,52 @@
     grid-column-start: min(6, 7);
   }
   .extend-event-1 {
-    margin-left: calc(1 * 100% / 7 - 50% / 7);
+    margin-left: calc(1 * 100% / 7 - 30% / 7);
   }
   .extend-event-2 {
-    margin-left: calc(2 * 100% / 7 - 50% / 7);
+    margin-left: calc(2 * 100% / 7 - 30% / 7);
   }
   .extend-event-3 {
-    margin-left: calc(3 * 100% / 7 - 50% / 7);
+    margin-left: calc(3 * 100% / 7 - 30% / 7);
   }
   .extend-event-4 {
-    margin-left: calc(4 * 100% / 7 - 50% / 7);
+    margin-left: calc(4 * 100% / 7 - 30% / 7);
   }
   .extend-event-5 {
-    margin-left: calc(5 * 100% / 7 - 50% / 7);
+    margin-left: calc(5 * 100% / 7 - 30% / 7);
   }
   .extend-event-6 {
-    margin-left: calc(6 * 100% / 7 - 50% / 7);
+    margin-left: calc(6 * 100% / 7 - 30% / 7);
   }
   .extend-event-7 {
-    margin-left: calc(7 * 100% / 7 - 50% / 7);
+    margin-left: calc(7 * 100% / 7 - 30% / 7);
   }
   .extend-event-8 {
-    margin-left: calc(8 * 100% / 7 - 50% / 7);
+    margin-left: calc(8 * 100% / 7 - 30% / 7);
   }
   .extend-event-l-1 {
-    margin-right: calc(1 * 100% / 7 - 50% / 7);
+    margin-right: calc(1 * 100% / 7 - 30% / 7);
   }
   .extend-event-l-2 {
-    margin-right: calc(2 * 100% / 7 - 50% / 7);
+    margin-right: calc(2 * 100% / 7 - 30% / 7);
   }
   .extend-event-l-3 {
-    margin-right: calc(3 * 100% / 7 - 50% / 7);
+    margin-right: calc(3 * 100% / 7 - 30% / 7);
   }
   .extend-event-l-4 {
-    margin-right: calc(4 * 100% / 7 - 50% / 7);
+    margin-right: calc(4 * 100% / 7 - 30% / 7);
   }
   .extend-event-l-5 {
-    margin-right: calc(5 * 100% / 7 - 50% / 7);
+    margin-right: calc(5 * 100% / 7 - 30% / 7);
   }
   .extend-event-l-6 {
-    margin-right: calc(6 * 100% / 7 - 50% / 7);
+    margin-right: calc(6 * 100% / 7 - 30% / 7);
   }
   .extend-event-l-7 {
-    margin-right: calc(7 * 100% / 7 - 50% / 7);
+    margin-right: calc(7 * 100% / 7 - 30% / 7);
   }
   .extend-event-l-8 {
-    margin-right: calc(8 * 100% / 7 - 50% / 7);
+    margin-right: calc(8 * 100% / 7 - 30% / 7);
   }
 
   .event-span-1 {
diff --git a/src/interfaces/index.tsx b/src/interfaces/index.tsx
index ffed68c..8c13eeb 100644
--- a/src/interfaces/index.tsx
+++ b/src/interfaces/index.tsx
@@ -1,13 +1,13 @@
-export namespace event {
-  export type date = string;
-}
+import { ReactChildren, ReactChild } from "react";
+
+export type Date = string;
 
 export interface objectKeys<V> {
   [key: string]: V;
 }
 
 export interface Children {
-  children: React.ReactNode;
+  children: ReactChild | ReactChildren;
 }
 
 export interface event {
@@ -29,25 +29,14 @@ export interface loginForm {
   password: string;
 }
 
-//Encoded tokens from API are expided within array that parses as this object {data: "encodedToken..."}
-export type encodedTokenFromAPI = { data: string };
-
 export interface token {
+  name: string;
   exp: number;
-  aud: string;
-  data: tokenData;
-}
-
-export interface tokenData {
-  iss: string;
-  uid: string;
-  usr: string;
-  aut: string;
-  rus: string;
+  data: { iss: string; usr: string; aut: string; rus: string };
+  // whatever else is in the JWT.
 }
 
 export type setstate<S> = React.Dispatch<React.SetStateAction<S>>;
 
-export type children = { children: React.ReactNode };
-
+export type children = { children: ReactChild | ReactChildren };
 export type composition = React.FC<children>;
diff --git a/src/layouts/Board.tsx b/src/layouts/Board.tsx
index d3d38e8..ba293b7 100644
--- a/src/layouts/Board.tsx
+++ b/src/layouts/Board.tsx
@@ -10,7 +10,7 @@ export const LayoutBoard = () => {
   const nextDates = useInfiniteScroll(1);
   const prevDates = ListPrevDates(nextDates[0], 2);
   //Query All Events
-  useGetAllEventsFrom(prevDates[1]);
+  useGetAllEventsFrom(nextDates[0]);
 
   //Fetch event after login
 
diff --git a/src/layouts/Main.tsx b/src/layouts/Main.tsx
index 4bf1a8f..93801f1 100644
--- a/src/layouts/Main.tsx
+++ b/src/layouts/Main.tsx
@@ -2,54 +2,9 @@ import { LayoutMaster } from "@/layouts/Master";
 import { LayoutHeader } from "@/layouts/Header";
 import * as tw_Layouts from "@/layouts/tw";
 import { useKeyboardShortcuts } from "@/hooks/useKeyListeners";
-import { useEffect, useLayoutEffect, useRef, useState } from "react";
-import { useOnDragEnter } from "@/components/Day/logic";
-import { useDnDEventRef } from "@/context/dndEventRef";
 
 export const LayoutMain = () => {
-  const onDragEnter = useOnDragEnter();
-  const dndEvent = useDnDEventRef();
-  console.log("Rendering Layout main", dndEvent);
   useKeyboardShortcuts();
-  const onDate = useRef("");
-
-  const hOnDragEnter = (e: DragEvent) => {
-    const componentsQuery = window.document.elementsFromPoint(
-      e.clientX,
-      e.clientY
-    );
-
-    //Recover the first day component encountered
-    const dayDiv = componentsQuery.find((e) => e.id.includes("day"));
-
-    //Check whether or not the cursor is over a Day subcomponent
-    if (typeof dayDiv === "undefined" || typeof onDragEnter === "undefined") {
-      return;
-    }
-
-    //Extract fullDate info from Day subcomponent's id
-    const date = dayDiv.id.split(":")[1];
-
-    //Check whether or not the cursor is over the current date being already registered
-    if (date === onDate.current) {
-      return;
-    }
-    onDate.current = date;
-    console.log("inside drag over", dndEvent);
-
-    onDragEnter(date, dndEvent);
-  };
-
-  useLayoutEffect(() => {
-    if (typeof dndEvent === "undefined") {
-      return;
-    }
-
-    window.document.addEventListener("dragover", hOnDragEnter);
-    return () => {
-      window.document.removeEventListener("dragover", hOnDragEnter);
-    };
-  }, [onDate, onDragEnter, dndEvent]);
   return (
     <tw_Layouts.TWapp id={"app"}>
       {/*header-layout*/}
diff --git a/src/layouts/tw.tsx b/src/layouts/tw.tsx
index 5a7c2a9..87c289f 100644
--- a/src/layouts/tw.tsx
+++ b/src/layouts/tw.tsx
@@ -1,7 +1,7 @@
 import tw from "tailwind-styled-components";
 
 export const TWapp = tw.div`
-	select-none box-border font-roboto font-normal md:text-xl text-sm scale-100 bg-slate-50
+	select-none box-border font-roboto font-extra md:text-xl text-sm  scale-100 bg-slate-50
 `;
 
 export const TWmain = tw.div`
@@ -9,7 +9,7 @@ flex flex-col
 `;
 
 export const TWcontroller = tw.div<{ $display: boolean }>`
-${({ $display }: { $display: boolean }) =>
+${({ $display }) =>
   ($display && "max-h-[95vh] customtp:max-h-[38vh] custombp:max-h-[88vh]") ||
   (!$display && "max-h-0") ||
   ""}	
diff --git a/src/main.tsx b/src/main.tsx
index e1f7bd6..eef3eae 100644
--- a/src/main.tsx
+++ b/src/main.tsx
@@ -1,59 +1,57 @@
 import React from "react";
-import { createRoot } from "react-dom/client";
+import ReactDOM from "react-dom";
 import "@/index.css";
-import { App } from "@/App";
-import { DOMRefsContext } from "@/context/DOMRefs";
-import { PushedDays } from "@/hooks/usePushDays";
-import { KeyBuffer } from "@/context/keyBuffer";
-import { TemporaryEvent } from "@/context/temporaryEvents";
-import { TopNavRef } from "@/context/topNavSize";
-import { CurrentMonthRef } from "@/context/currentMonthReference";
-import { IsFetchingEvents } from "@/hooks/useIsFetchingEvents";
-import { IsDraggingEvent } from "@/hooks/useIsDragging";
+import App from "@/App";
+import { UserSession } from "@/hooks/useUserSession";
+import { EventsDispatcher } from "@/hooks/useEventsState";
+import { UserPreferences } from "@/hooks/useLocalUserPreferences";
+
 import { ControllerProvider } from "@/hooks/useController";
 import { ControllerProviderDates } from "@/hooks/useControllerDate";
-import { UserPreferences } from "@/hooks/useLocalUserPreferences";
-import { EventsDispatcher } from "@/hooks/useEventsState";
-import { EventInController } from "@/context/eventSelected";
+import { IsDraggingEvent } from "@/hooks/useIsDragging";
 import { EventsStatus } from "@/hooks/useEventsStatus";
-import { UserSession } from "@/hooks/useUserSession";
-import { EventInDnD } from "./context/dndEventRef";
+import { IsFetchingEvents } from "@/hooks/useIsFetchingEvents";
+import { CurrentMonthRef } from "@/globalStorage/currentMonthReference";
+import { TopNavRef } from "@/globalStorage/topNavSize";
+import { DOMRefs } from "@/globalStorage/DOMRefs";
+import { TemporaryEvent } from "@/globalStorage/temporaryEvents";
+import { KeyBuffer } from "@/globalStorage/keyBuffer";
+import { EventInController } from "@/globalStorage/eventSelected";
+import { PushedDays } from "@/hooks/usePushDays";
 
-// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
-createRoot(document.getElementById("root")!).render(
+ReactDOM.render(
   <React.StrictMode>
-    <DOMRefsContext>
-      <EventInDnD>
-        <PushedDays>
-          <KeyBuffer>
-            <TemporaryEvent>
-              <TopNavRef>
-                <CurrentMonthRef>
-                  <IsFetchingEvents>
-                    <IsDraggingEvent>
-                      <ControllerProvider>
-                        <ControllerProviderDates>
-                          <UserPreferences>
-                            <EventsDispatcher>
-                              <EventInController>
-                                <EventsStatus>
-                                  <UserSession>
-                                    <App />
-                                  </UserSession>
-                                </EventsStatus>
-                              </EventInController>
-                            </EventsDispatcher>
-                          </UserPreferences>
-                        </ControllerProviderDates>
-                      </ControllerProvider>
-                    </IsDraggingEvent>
-                  </IsFetchingEvents>
-                </CurrentMonthRef>
-              </TopNavRef>
-            </TemporaryEvent>
-          </KeyBuffer>
-        </PushedDays>
-      </EventInDnD>
-    </DOMRefsContext>
-  </React.StrictMode>
+    <DOMRefs.Context>
+      <PushedDays>
+        <KeyBuffer>
+          <TemporaryEvent>
+            <TopNavRef>
+              <CurrentMonthRef>
+                <IsFetchingEvents>
+                  <IsDraggingEvent>
+                    <ControllerProvider>
+                      <ControllerProviderDates>
+                        <UserPreferences>
+                          <EventsDispatcher>
+                            <EventInController>
+                              <EventsStatus>
+                                <UserSession>
+                                  <App />
+                                </UserSession>
+                              </EventsStatus>
+                            </EventInController>
+                          </EventsDispatcher>
+                        </UserPreferences>
+                      </ControllerProviderDates>
+                    </ControllerProvider>
+                  </IsDraggingEvent>
+                </IsFetchingEvents>
+              </CurrentMonthRef>
+            </TopNavRef>
+          </TemporaryEvent>
+        </KeyBuffer>
+      </PushedDays>
+    </DOMRefs.Context>
+  </React.StrictMode>,
+  document.getElementById("root")
 );
diff --git a/src/modules/jwt.ts b/src/modules/jwt.ts
deleted file mode 100644
index c8f6adc..0000000
--- a/src/modules/jwt.ts
+++ /dev/null
@@ -1,29 +0,0 @@
-import jwt_decode from "jwt-decode";
-import { nullToken } from "@/customTypes";
-import { encodedTokenFromAPI, token } from "@/interfaces";
-import { checkObjectValidKeys, nameAndType } from "@/patterns/reflection";
-
-// This function wraps jwt_decode to create a nothrow function that allways gives you a token either valid or empty (null)
-export function safeDecodeJWT(encodedToken: encodedTokenFromAPI) {
-  const checkValid = typeof encodedToken == "object" && "data" in encodedToken;
-  if (!checkValid) {
-    return nullToken(); //checked
-  }
-
-  let token: token;
-  try {
-    token = jwt_decode<token>(encodedToken.data);
-  } catch {
-    return nullToken(); //checked
-  }
-  //Check decoded token match all the fields of an empty token
-  const { data, ...header } = nullToken();
-  const validHeader = checkObjectValidKeys(nameAndType(header), token);
-  const validData = checkObjectValidKeys(nameAndType(data), token.data);
-  if (!validHeader || !validData) {
-    return nullToken(); //checked
-  }
-
-  //Check-passed and return a valid token
-  return { ...token, data: { ...token.data } };
-}
diff --git a/src/patterns/reflection.ts b/src/patterns/reflection.ts
deleted file mode 100644
index c4e42de..0000000
--- a/src/patterns/reflection.ts
+++ /dev/null
@@ -1,51 +0,0 @@
-type primitiveTypes =
-  | "bigint"
-  | "boolean"
-  | "function"
-  | "number"
-  | "string"
-  | "object"
-  | "symbol"
-  | "undefined";
-
-type propTypes = {
-  name: PropertyKey;
-  type: primitiveTypes;
-};
-
-// Function created to tell TS allow us the use object prototype in order to avoid: 'prop in obj' as it scope is broader than 'obj.hasOwnProperty(prop)'
-// references:
-//	- difference between 'in' vs 'hasOwnProperty':	https://stackoverflow.com/a/13633027/11231828
-//	- implementation of hasOwnProperty in TS:				https://fettblog.eu/typescript-hasownproperty/
-function hasOwnProperty<X extends {}, Y extends PropertyKey>(
-  obj: X,
-  prop: Y
-): obj is X & Record<Y, unknown> {
-  return obj.hasOwnProperty(prop);
-}
-
-// This function could recieve anything as object is intended to come from outside, so even if I type object as object I can't remove the first check because it is checking the run-time
-export function checkObjectValidKeys(
-  propsToCheck: Array<propTypes>,
-  object: unknown
-) {
-  //Run-time check
-  if (object === null || typeof object !== "object") {
-    return false;
-  }
-
-  return propsToCheck
-    .map(
-      (k) => hasOwnProperty(object, k.name) && typeof object[k.name] === k.type
-    )
-    .every((check) => check);
-}
-
-// This is a helper function that create the expected array of key-values of {prop-type} for the object we want to check
-// by using a reference object from the library, usually it takes a null object
-// return and Array of key-value pairs with the name and the type of each field of an object
-export const nameAndType = (object: object) =>
-  Object.entries(object).map((k) => ({
-    name: k[0],
-    type: typeof k[1],
-  }));
diff --git a/src/static/apiRoutes.ts b/src/static/apiRoutes.ts
index 64e3648..43dc8b0 100644
--- a/src/static/apiRoutes.ts
+++ b/src/static/apiRoutes.ts
@@ -1,4 +1,4 @@
-const domain = import.meta.env.MODE === "development" ? "http://localhost" : "";
+const domain = "http://localhost"; //http://localhost
 
 export const api = {
   routes: {
diff --git a/src/test/Token.test.ts b/src/test/Token.test.ts
deleted file mode 100644
index 59c2fef..0000000
--- a/src/test/Token.test.ts
+++ /dev/null
@@ -1,213 +0,0 @@
-/** @jest-environment jsdom */
-import { Token } from "@/classes/token";
-import { nullEncodedToken, nullEvent, nullToken } from "@/customTypes";
-import { encodedTokenFromAPI, token } from "@/interfaces";
-import { safeDecodeJWT } from "@/modules/jwt";
-import { DocumentIO } from "@/window/cookie";
-
-// Note about testing thread execution:
-// after defining some constants and helper functions I need to mock the content of window.document.cookie
-// take into account that each time I assign a new value to that mock, it will be available for the rest of the thread execution from this point
-// so the paradigm used here is to change it puntually, each change is marked down with a comment, to ease readability.
-
-const token0 =
-  "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2NTA4ODY1NTgsImF1ZCI6IjZlZWU0OTg3MGU1YzY5ODlmNTc3MjEyY2NhZDg3YTcxYmNmYzdiZmYiLCJkYXRhIjp7ImlzcyI6ImxvY2FsaG9zdCIsInVpZCI6IjEiLCJ1c3IiOiJzYW11ZWwiLCJhdXQiOiJyZWFkLXdyaXRlIiwicnVzIjoiYWxsIn19.AIz7jwEXxDMpYdz0VvfoIECXF44gv93yVSS4RXT07iw";
-const token1 =
-  "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE1NTA4ODY1NTgsImF1ZCI6IjZlZWU0OTg3MGU1YzY5ODlmNTc3MjEyY2NhZDg3YTcxYmNmYzdiZmYiLCJkYXRhIjp7ImlzcyI6ImxvY2FsaG9zdCIsInVpZCI6IjEiLCJ1c3IiOiJzYW11ZWwiLCJhdXQiOiJyZWFkLXdyaXRlIiwicnVzIjoiYWxsIn19.jdB69MJrYAb5j51In0kVqgyyBD1K_TqJ78bIFDRJimg";
-/**
- * parse valid token with exp:1700000000
- */
-const token2 =
-  "eyJhbGciOiJIUzI1NiJ9.eyJleHAiOjE3MDAwMDAwMDAsImF1ZCI6IjZlZWU0OTg3MGU1YzY5ODlmNTc3MjEyY2NhZDg3YTcxYmNmYzdiZmYiLCJkYXRhIjp7ImlzcyI6ImxvY2FsaG9zdCIsInVpZCI6IjEiLCJ1c3IiOiJzYW11ZWwiLCJhdXQiOiJyZWFkLXdyaXRlIiwicnVzIjoiYWxsIn19.S9SzUoP1EHTosfU_NmStidvy5VfOUArHJ4oKu0aKAJQ";
-/**
- * parse a valid token:
-			exp: 1650886558,
-      aud: "6eee49870e5c6989f577212ccad87a71bcfc7bff",
-      data: {
-        iss: "localhost",
-				uid: "1",
-        usr: "samuel",
-        aut: "read-write",
-        rus: "all",
- */
-const token3 = //parse valid token
-  "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjE2NTA4ODY1NTgsImF1ZCI6IjZlZWU0OTg3MGU1YzY5ODlmNTc3MjEyY2NhZDg3YTcxYmNmYzdiZmYiLCJkYXRhIjp7ImlzcyI6ImxvY2FsaG9zdCIsInVpZCI6IjEiLCJ1c3IiOiJzYW11ZWwiLCJhdXQiOiJyZWFkLXdyaXRlIiwicnVzIjoiYWxsIn19.AIz7jwEXxDMpYdz0VvfoIECXF44gv93yVSS4RXT07iw";
-/**
- * parse falsy or ill-formed token
- */
-const token4 =
-  "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjEyNTA4ODY1NTgsImRhdGEiOnsiaXNzIjoibG9jYWxob3N0IiwidWlkIjoiMSIsInVzciI6InNhbXVlbCIsImF1dCI6InJlYWQtd3JpdGUiLCJydXMiOiJhbGwifX0.WCEWZBcrafkVaThL0_YfQvDhILZT-nKMUS0o2xd4f6I";
-
-/**
- * parse a valid token:
-			exp: 1650886558,
-      aud: "6eee49870e5c6989f577212ccad87a71bcfc7bff",
-      data: {
-        iss: "localhost",
-				uid: "2",
-        usr: "thomas",
-        aut: "read",
-        rus: "all",
- */
-const token5 =
-  "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJleHAiOjEyNTA4ODY1NTgsImRhdGEiOnsiaXNzIjoibG9jYWxob3N0IiwidWlkIjoiMiIsInVzciI6InRob21hcyIsImF1dCI6InJlYWQiLCJydXMiOiJhbGwifX0.EJBfyBnLjdx0OxzSaG8TaJNIISEXzj4B3c7WkhNxKh8";
-
-const expidedPHPSESSID = "PHPSESSID=3fc65ec6c17a9cb6482be8378a6414fb";
-const expidedToken = (token: string) =>
-  `762459e65c7f3357f4009b093d237344=%7B%22data%22%3A%22${token}%22%7D`;
-
-/**
- * Allows to generate any kind data coming from external api
- * It's usefull to create ill-formed data of certain custom type
- * or event to create valid data as needed
- */
-
-function ExternalData<T>(data: any): T {
-  return JSON.parse(JSON.stringify(data));
-}
-
-//! Mock window.document and assign a first value
-Object.defineProperty(window.document, "cookie", {
-  writable: true,
-  value: `
-	${expidedPHPSESSID};
-	${expidedToken(token0)};
-	${expidedToken(token1)};
-	${expidedToken(token2)}`,
-});
-
-describe("Testing window api read encoded tokens", () => {
-  test("Mock document cookies with all kind of cookies expided from server: PHPSESSID and Tokens", () => {
-    const tokens = DocumentIO.readTokens();
-    const expected = [{ data: token0 }, { data: token1 }, { data: token2 }];
-
-    expect(tokens).toStrictEqual(expected);
-  });
-});
-
-describe("Testing Token Class", () => {
-  test("Get the valid newer Token from cookies with multiple tokens", () => {
-    const result = new Token();
-    expect(result.data()).toStrictEqual({
-      iss: "localhost",
-      uid: "1",
-      usr: "samuel",
-      aut: "read-write",
-      rus: "all",
-    });
-  });
-});
-
-describe("Testing custom object instances", () => {
-  test("Multiple instances of Null Token create different objects each time", () => {
-    const token1 = nullToken();
-    const token2 = nullToken();
-    token2.aud = "dsa";
-    expect(token1).not.toBe(token2);
-  });
-  test("Multiple instances of Null Encoded Token create different objects each time", () => {
-    const token1 = nullEncodedToken();
-    const token2 = nullEncodedToken();
-    expect(token1).not.toBe(token2);
-  });
-  test("instantiating independent nullEvent objects", () => {
-    const token1 = nullEvent();
-    const token2 = nullEvent();
-    expect(token1).not.toBe(token2);
-  });
-});
-
-describe("Testing module wrapper for jwt_decode called safeDecodeJWT", () => {
-  test("Parse unexpected data as nullToken", () => {
-    const unexpectedToken = ExternalData<encodedTokenFromAPI>({});
-    const result = safeDecodeJWT(unexpectedToken);
-    expect(result).toStrictEqual(nullToken());
-  });
-
-  test("Parse a falsy or ill-formed token as nullToken", () => {
-    const illFormedToken = ExternalData<encodedTokenFromAPI>({
-      data: "",
-    });
-    const result = safeDecodeJWT(illFormedToken);
-    expect(result).toEqual(nullToken());
-  });
-
-  test("Parse an incomplete token as nullToken", () => {
-    const validToken = ExternalData<encodedTokenFromAPI>({
-      data: token4,
-    });
-    const result = safeDecodeJWT(validToken);
-    expect(result).toEqual(nullToken());
-  });
-
-  test("Parse a valid token", () => {
-    const validToken = ExternalData<encodedTokenFromAPI>({
-      data: token3,
-    });
-    const result = safeDecodeJWT(validToken);
-    expect(result).toEqual({
-      exp: 1650886558,
-      aud: "6eee49870e5c6989f577212ccad87a71bcfc7bff",
-      data: {
-        iss: "localhost",
-        uid: "1",
-        usr: "samuel",
-        aut: "read-write",
-        rus: "all",
-      },
-    });
-  });
-});
-
-describe("Testing getters methods from Token class with a valid expided token", () => {
-  test("Testing get name in case of valid token", () => {
-    const token = new Token();
-    expect(token.user()).toBe("samuel");
-  });
-
-  test("Testing getter isValid expect to be true", () => {
-    const token = new Token();
-    expect(token.isValid()).toBe(true);
-  });
-
-  test("Testing getter isAuth expect to be true", () => {
-    const token = new Token();
-    expect(token.isAuth()).toBe(true);
-  });
-
-  test("Testing null Token method", () => {
-    const token = Token.null();
-
-    expect(token.isValid()).toBe(false);
-  });
-
-  test("Testing getter is the same user", () => {
-    const token = new Token();
-    window.document.cookie = `${expidedToken(token5)};`; //!cookie content changed: to simulate another user is now logged
-    const other = new Token();
-    expect(token.isSameUser(other)).toBe(false);
-  });
-
-  test("Testing getter isAuth expect to be false as user is Thomas with aut = read", () => {
-    const token = new Token();
-    expect(token.isAuth()).toBe(false);
-  });
-});
-
-describe("Testing getters methods from Token class with a invalid expided token", () => {
-  test("Testing get name in case of valid token", () => {
-    window.document.cookie = ""; //!cookie content changed: to simulate no cookies stored in document
-    const token = new Token();
-    expect(token.user()).toBe("invited");
-  });
-
-  test("Testing getter isValid expect to be false", () => {
-    const token = new Token();
-    expect(token.isValid()).toBe(false);
-  });
-
-  test("Testing getter isAuth expect to be false", () => {
-    const token = new Token();
-    expect(token.isAuth()).toBe(false);
-  });
-});
diff --git a/src/test/hooks/counter.test.ts b/src/test/hooks/counter.test.ts
deleted file mode 100644
index 6dbccf3..0000000
--- a/src/test/hooks/counter.test.ts
+++ /dev/null
@@ -1,21 +0,0 @@
-/** @jest-environment jsdom */
-import { useCounter } from "@/hooks/templates/counter";
-import { renderHook, act } from "@testing-library/react-hooks";
-
-describe("Testing counter hook with React18 with React17 render method", () => {
-  //Disable  console.error for this describe scope: source https://stackoverflow.com/a/58717352/11231828
-  //!Warning: ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot
-  beforeEach(() => {
-    jest.spyOn(console, "error").mockImplementation(() => {});
-  });
-
-  test("should increment counter", () => {
-    const { result } = renderHook(() => useCounter());
-
-    act(() => {
-      result.current.increment();
-    });
-
-    expect(result.current.count).toBe(1);
-  });
-});
diff --git a/src/test/hooks/exampleContext.test.tsx b/src/test/hooks/exampleContext.test.tsx
deleted file mode 100644
index cfa42e1..0000000
--- a/src/test/hooks/exampleContext.test.tsx
+++ /dev/null
@@ -1,31 +0,0 @@
-/** @jest-environment jsdom */
-import React from "react";
-import { IsDraggingEvent, Context } from "@/hooks/useIsDragging";
-import { renderHook, act } from "@testing-library/react-hooks";
-
-describe("Context test", () => {
-  //Disable  console.error for this describe scope: source https://stackoverflow.com/a/58717352/11231828
-  //!Warning: ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot
-  beforeEach(() => {
-    jest.spyOn(console, "error").mockImplementation(() => {});
-  });
-
-  test("Testing: isDragging hook switch state false -> true", () => {
-    //Wrapping context
-    const wrapper = ({ children }: { children: React.ReactNode }) => (
-      <IsDraggingEvent>{children}</IsDraggingEvent>
-    );
-    const { result } = renderHook(() => Context.useIsDragging(), { wrapper });
-
-    //From: false
-    expect(result.current.isDragging).toBe(false);
-
-    //set
-    act(() => {
-      result.current.setIsDragging(true);
-    });
-
-    //To: true
-    expect(result.current.isDragging).toBe(true);
-  });
-});
diff --git a/src/test/hooks/exampleContext.tsx b/src/test/hooks/exampleContext.tsx
deleted file mode 100644
index 46b8fc0..0000000
--- a/src/test/hooks/exampleContext.tsx
+++ /dev/null
@@ -1,25 +0,0 @@
-import { createContext, useState, useContext, useCallback } from "react";
-
-const CounterStepContext = createContext(1);
-
-type CounterStepProvider = {
-  children: React.ReactNode;
-  step: number;
-};
-
-export const CounterStepProvider = ({
-  step,
-  children,
-}: CounterStepProvider) => (
-  <CounterStepContext.Provider value={step}>
-    {children}
-  </CounterStepContext.Provider>
-);
-
-export function useCounter(initialValue = 0) {
-  const [count, setCount] = useState(initialValue);
-  const step = useContext(CounterStepContext);
-  const increment = useCallback(() => setCount((x) => x + step), [step]);
-  const reset = useCallback(() => setCount(initialValue), [initialValue]);
-  return { count, increment, reset };
-}
diff --git a/src/utils/Fetch.ts b/src/utils/Fetch.ts
index 2557c7f..57a9368 100644
--- a/src/utils/Fetch.ts
+++ b/src/utils/Fetch.ts
@@ -1,6 +1,6 @@
 const FormData = require("form-data");
 import { api } from "@/static/apiRoutes";
-import { event, objectKeys } from "@/interfaces/index";
+import { event, objectKeys } from "@interfaces/index";
 
 //const hostinger = "https://samuelengineer.com";
 
diff --git a/src/utils/fetchEvent.ts b/src/utils/fetchEvent.ts
index afe0aac..20e7c28 100644
--- a/src/utils/fetchEvent.ts
+++ b/src/utils/fetchEvent.ts
@@ -1,5 +1,5 @@
-import { CustomTypes, nullEvent } from "@/customTypes";
-import { event, objectKeys } from "@/interfaces/index";
+import { CustomTypes, CustomValues } from "@/customTypes";
+import { event, objectKeys } from "@interfaces/index";
 import { api } from "@/static/apiRoutes";
 
 /**
@@ -7,7 +7,7 @@ import { api } from "@/static/apiRoutes";
  */
 export async function fetchEvent_Day(
   action: CustomTypes.OptionsEventsAPI,
-  event: event = nullEvent()
+  event: event = CustomValues.nullEvent
 ) {
   const data = new FormData();
   const { mutable, ...filteredEvent } = event;
@@ -30,7 +30,7 @@ export async function fetchEvent_Day(
 }
 export async function fetchEvent(
   action: CustomTypes.OptionsEventsAPI,
-  event: event = nullEvent()
+  event: event = CustomValues.nullEvent
 ) {
   const data = new FormData();
   const { mutable, ...filteredEvent } = event;
diff --git a/src/window/cookie.ts b/src/window/cookie.ts
deleted file mode 100644
index e5b8561..0000000
--- a/src/window/cookie.ts
+++ /dev/null
@@ -1,100 +0,0 @@
-import { nullEncodedToken } from "@/customTypes";
-import { encodedTokenFromAPI } from "@/interfaces";
-import { checkObjectValidKeys, nameAndType } from "@/patterns/reflection";
-
-//Tested on describe: "Testing window api read encoded tokens"
-export namespace DocumentIO {
-  //This function read all cookies from the document and returns non-empty parsed objects as {data: "encoded token..."}
-
-  export function readTokens() {
-    const tokenCookies = readCookiesBody();
-    return parseURITokens(tokenCookies);
-  }
-
-  export function readCookiesName() {
-    return window.document.cookie
-      .split(";")
-      .filter((cookie) => cookie !== "")
-      .map((cookie) => cookie.split("=")[0]);
-  }
-
-  export function deleteAllCookies() {
-    const cookiesName = DocumentIO.readCookiesName();
-    cookiesName.map((name) => DocumentIO.deleteCookie(name));
-  }
-
-  export function deleteCookie(name: string) {
-    //! TL;DR
-    //	https://stackoverflow.com/questions/2959010/how-to-get-the-domain-value-for-a-cookie-in-javascript
-    //	The cookie metadata like path, domain and expires are not visible to site code (neither to JavaScript nor to the server-side).
-    //	You can only access cookies from the same domain (this includes subdomains). Obviously doing otherwise would be a security concern.
-    //	To only remove a cookie at any subdomain level, what you could do is try to remove the cookie at every possible level of specificity, eg:
-
-    //	Blank spaces left just for readability in this example:
-
-    //	document.cookie= 'foo=;domain=           example.com;expires=Sat, 01-Jan-2000 00:00:00 GMT';
-    //	document.cookie= 'foo=;domain=    domain.example.com;expires=Sat, 01-Jan-2000 00:00:00 GMT';
-    //	document.cookie= 'foo=;domain=sub.domain.example.com;expires=Sat, 01-Jan-2000 00:00:00 GMT';
-
-    //! Note about legacy:
-    //	in production env (https://jhdiary.com), the backend emitts the following cookies:
-    //
-    //	- PHPSESSID: Domain=jhdiary.com
-    //	- TOKENHASH: Domain=.jhdiary.com
-    //
-    //	so in order to delete all cookies I've tried to just delete them by preceding a dot before domain name
-    //	it seems to work in development env so I presume it will also work in production env
-    const legacy = ".";
-
-    const location = legacy + window.document.location.host.split(":")[0];
-
-    window.document.cookie = `${name}=; Domain=${location}; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;`;
-  }
-
-  function readCookiesBody() {
-    const cookies = window.document.cookie
-      .split(";")
-      .map((cookie) => cookie.trim().split("=")[1]);
-
-    return cookies;
-  }
-
-  function parseURITokens(encodedTokens: string[]) {
-    return encodedTokens
-      .map(hDecodeURI)
-      .filter((encodedToken) => encodedToken.data !== "");
-  }
-
-  //map handler
-  const hDecodeURI = (cookie: string): encodedTokenFromAPI => {
-    if (!cookie) {
-      return nullEncodedToken();
-    }
-
-    let decoded: string;
-    try {
-      decoded = decodeURIComponent(cookie);
-    } catch {
-      return nullEncodedToken();
-    }
-
-    if (decoded === "") {
-      return nullEncodedToken();
-    }
-
-    let encodedToken: encodedTokenFromAPI;
-    try {
-      encodedToken = JSON.parse(decoded);
-    } catch (e: any) {
-      return nullEncodedToken();
-    }
-
-    // This line parses the outcoming cookie to check if it fits the current implementation of the API which sends an object as: {data: "..."}
-    // if the parsed cookie doesn't fit this object an nullEncodedToken is returned
-    if (!checkObjectValidKeys(nameAndType(nullEncodedToken), encodedToken)) {
-      return nullEncodedToken();
-    }
-
-    return { ...encodedToken };
-  };
-}
diff --git a/src/window/fetch.ts b/src/window/fetch.ts
deleted file mode 100644
index 78fd1b3..0000000
--- a/src/window/fetch.ts
+++ /dev/null
@@ -1,26 +0,0 @@
-import { loginForm } from "@/interfaces";
-import { api } from "@/static/apiRoutes";
-import { DocumentIO } from "@/window/cookie";
-
-export function fetchLogin(payload: any) {
-  const data = new FormData();
-  data.append("json", JSON.stringify(payload));
-
-  fetch(api.routes.login, {
-    method: "POST",
-    body: data,
-  })
-    .then((res) => {
-      if (res.status !== 201) {
-        throw Error(`Error code: ${res.status}`);
-      }
-    })
-    .catch(() => {
-      DocumentIO.deleteAllCookies();
-    });
-}
-
-export function clearLogin() {
-  const nullForm: loginForm = { user: "", password: "" };
-  fetchLogin(nullForm);
-}
diff --git a/src/window/touch.js b/src/window/touch.js
deleted file mode 100644
index 028fcc3..0000000
--- a/src/window/touch.js
+++ /dev/null
@@ -1,475 +0,0 @@
-export const DragAndDropTouch = () => {
-  var DragDropTouch;
-  (function (DragDropTouch_1) {
-    /**
-     * Object used to hold the data that is being dragged during drag and drop operations.
-     *
-     * It may hold one or more data items of different types. For more information about
-     * drag and drop operations and data transfer objects, see
-     * <a href="https://developer.mozilla.org/en-US/docs/Web/API/DataTransfer">HTML Drag and Drop API</a>.
-     *
-     * This object is created automatically by the @see:DragDropTouch singleton and is
-     * accessible through the @see:dataTransfer property of all drag events.
-     */
-    var DataTransfer = (function () {
-      function DataTransfer() {
-        this._dropEffect = "move";
-        this._effectAllowed = "all";
-        this._data = {};
-      }
-      Object.defineProperty(DataTransfer.prototype, "dropEffect", {
-        /**
-         * Gets or sets the type of drag-and-drop operation currently selected.
-         * The value must be 'none',  'copy',  'link', or 'move'.
-         */
-        get: function () {
-          return this._dropEffect;
-        },
-        set: function (value) {
-          this._dropEffect = value;
-        },
-        enumerable: true,
-        configurable: true,
-      });
-      Object.defineProperty(DataTransfer.prototype, "effectAllowed", {
-        /**
-         * Gets or sets the types of operations that are possible.
-         * Must be one of 'none', 'copy', 'copyLink', 'copyMove', 'link',
-         * 'linkMove', 'move', 'all' or 'uninitialized'.
-         */
-        get: function () {
-          return this._effectAllowed;
-        },
-        set: function (value) {
-          this._effectAllowed = value;
-        },
-        enumerable: true,
-        configurable: true,
-      });
-      Object.defineProperty(DataTransfer.prototype, "types", {
-        /**
-         * Gets an array of strings giving the formats that were set in the @see:dragstart event.
-         */
-        get: function () {
-          return Object.keys(this._data);
-        },
-        enumerable: true,
-        configurable: true,
-      });
-      /**
-       * Removes the data associated with a given type.
-       *
-       * The type argument is optional. If the type is empty or not specified, the data
-       * associated with all types is removed. If data for the specified type does not exist,
-       * or the data transfer contains no data, this method will have no effect.
-       *
-       * @param type Type of data to remove.
-       */
-      DataTransfer.prototype.clearData = function (type) {
-        if (type != null) {
-          delete this._data[type.toLowerCase()];
-        } else {
-          this._data = {};
-        }
-      };
-      /**
-       * Retrieves the data for a given type, or an empty string if data for that type does
-       * not exist or the data transfer contains no data.
-       *
-       * @param type Type of data to retrieve.
-       */
-      DataTransfer.prototype.getData = function (type) {
-        return this._data[type.toLowerCase()] || "";
-      };
-      /**
-       * Set the data for a given type.
-       *
-       * For a list of recommended drag types, please see
-       * https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Recommended_Drag_Types.
-       *
-       * @param type Type of data to add.
-       * @param value Data to add.
-       */
-      DataTransfer.prototype.setData = function (type, value) {
-        this._data[type.toLowerCase()] = value;
-      };
-      /**
-       * Set the image to be used for dragging if a custom one is desired.
-       *
-       * @param img An image element to use as the drag feedback image.
-       * @param offsetX The horizontal offset within the image.
-       * @param offsetY The vertical offset within the image.
-       */
-      DataTransfer.prototype.setDragImage = function (img, offsetX, offsetY) {
-        var ddt = DragDropTouch._instance;
-        ddt._imgCustom = img;
-        ddt._imgOffset = { x: offsetX, y: offsetY };
-      };
-      return DataTransfer;
-    })();
-    DragDropTouch_1.DataTransfer = DataTransfer;
-    /**
-     * Defines a class that adds support for touch-based HTML5 drag/drop operations.
-     *
-     * The @see:DragDropTouch class listens to touch events and raises the
-     * appropriate HTML5 drag/drop events as if the events had been caused
-     * by mouse actions.
-     *
-     * The purpose of this class is to enable using existing, standard HTML5
-     * drag/drop code on mobile devices running IOS or Android.
-     *
-     * To use, include the DragDropTouch.js file on the page. The class will
-     * automatically start monitoring touch events and will raise the HTML5
-     * drag drop events (dragstart, dragenter, dragleave, drop, dragend) which
-     * should be handled by the application.
-     *
-     * For details and examples on HTML drag and drop, see
-     * https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Drag_operations.
-     */
-    var DragDropTouch = (function () {
-      /**
-       * Initializes the single instance of the @see:DragDropTouch class.
-       */
-      function DragDropTouch() {
-        this._lastClick = 0;
-        // enforce singleton pattern
-        if (DragDropTouch._instance) {
-          throw "DragDropTouch instance already created.";
-        }
-        // detect passive event support
-        // https://github.com/Modernizr/Modernizr/issues/1894
-        var supportsPassive = false;
-        document.addEventListener("test", function () {}, {
-          get passive() {
-            supportsPassive = true;
-            return true;
-          },
-        });
-        // listen to touch events
-        if (navigator.maxTouchPoints) {
-          var d = document,
-            ts = this._touchstart.bind(this),
-            tm = this._touchmove.bind(this),
-            te = this._touchend.bind(this),
-            opt = supportsPassive ? { passive: false, capture: false } : false;
-          d.addEventListener("touchstart", ts, opt);
-          d.addEventListener("touchmove", tm, opt);
-          d.addEventListener("touchend", te);
-          d.addEventListener("touchcancel", te);
-        }
-      }
-      /**
-       * Gets a reference to the @see:DragDropTouch singleton.
-       */
-      DragDropTouch.getInstance = function () {
-        return DragDropTouch._instance;
-      };
-      // ** event handlers
-      DragDropTouch.prototype._touchstart = function (e) {
-        var _this = this;
-        if (this._shouldHandle(e)) {
-          // raise double-click and prevent zooming
-          if (Date.now() - this._lastClick < DragDropTouch._DBLCLICK) {
-            if (this._dispatchEvent(e, "dblclick", e.target)) {
-              e.preventDefault();
-              this._reset();
-              return;
-            }
-          }
-          // clear all variables
-          this._reset();
-          // get nearest draggable element
-          var src = this._closestDraggable(e.target);
-          if (src) {
-            // give caller a chance to handle the hover/move events
-            if (
-              !this._dispatchEvent(e, "mousemove", e.target) &&
-              !this._dispatchEvent(e, "mousedown", e.target)
-            ) {
-              // get ready to start dragging
-              this._dragSource = src;
-              this._ptDown = this._getPoint(e);
-              this._lastTouch = e;
-              e.preventDefault();
-              // show context menu if the user hasn't started dragging after a while
-              setTimeout(function () {
-                if (_this._dragSource == src && _this._img == null) {
-                  if (_this._dispatchEvent(e, "contextmenu", src)) {
-                    _this._reset();
-                  }
-                }
-              }, DragDropTouch._CTXMENU);
-              if (DragDropTouch._ISPRESSHOLDMODE) {
-                this._pressHoldInterval = setTimeout(function () {
-                  _this._isDragEnabled = true;
-                  _this._touchmove(e);
-                }, DragDropTouch._PRESSHOLDAWAIT);
-              }
-            }
-          }
-        }
-      };
-      DragDropTouch.prototype._touchmove = function (e) {
-        if (this._shouldCancelPressHoldMove(e)) {
-          this._reset();
-          return;
-        }
-        if (this._shouldHandleMove(e) || this._shouldHandlePressHoldMove(e)) {
-          // see if target wants to handle move
-          var target = this._getTarget(e);
-          if (this._dispatchEvent(e, "mousemove", target)) {
-            this._lastTouch = e;
-            e.preventDefault();
-            return;
-          }
-          // start dragging
-          if (this._dragSource && !this._img && this._shouldStartDragging(e)) {
-            this._dispatchEvent(e, "dragstart", this._dragSource);
-            this._createImage(e);
-            this._dispatchEvent(e, "dragenter", target);
-          }
-          // continue dragging
-          if (this._img) {
-            this._lastTouch = e;
-            e.preventDefault(); // prevent scrolling
-            this._dispatchEvent(e, "drag", this._dragSource);
-            if (target != this._lastTarget) {
-              this._dispatchEvent(
-                this._lastTouch,
-                "dragleave",
-                this._lastTarget
-              );
-              this._dispatchEvent(e, "dragenter", target);
-              this._lastTarget = target;
-            }
-            this._moveImage(e);
-            this._isDropZone = this._dispatchEvent(e, "dragover", target);
-          }
-        }
-      };
-      DragDropTouch.prototype._touchend = function (e) {
-        if (this._shouldHandle(e)) {
-          // see if target wants to handle up
-          if (this._dispatchEvent(this._lastTouch, "mouseup", e.target)) {
-            e.preventDefault();
-            return;
-          }
-          // user clicked the element but didn't drag, so clear the source and simulate a click
-          if (!this._img) {
-            this._dragSource = null;
-            this._dispatchEvent(this._lastTouch, "click", e.target);
-            this._lastClick = Date.now();
-          }
-          // finish dragging
-          this._destroyImage();
-          if (this._dragSource) {
-            if (e.type.indexOf("cancel") < 0 && this._isDropZone) {
-              this._dispatchEvent(this._lastTouch, "drop", this._lastTarget);
-            }
-            this._dispatchEvent(this._lastTouch, "dragend", this._dragSource);
-            this._reset();
-          }
-        }
-      };
-      // ** utilities
-      // ignore events that have been handled or that involve more than one touch
-      DragDropTouch.prototype._shouldHandle = function (e) {
-        return e && !e.defaultPrevented && e.touches && e.touches.length < 2;
-      };
-
-      // use regular condition outside of press & hold mode
-      DragDropTouch.prototype._shouldHandleMove = function (e) {
-        return !DragDropTouch._ISPRESSHOLDMODE && this._shouldHandle(e);
-      };
-
-      // allow to handle moves that involve many touches for press & hold
-      DragDropTouch.prototype._shouldHandlePressHoldMove = function (e) {
-        return (
-          DragDropTouch._ISPRESSHOLDMODE &&
-          this._isDragEnabled &&
-          e &&
-          e.touches &&
-          e.touches.length
-        );
-      };
-
-      // reset data if user drags without pressing & holding
-      DragDropTouch.prototype._shouldCancelPressHoldMove = function (e) {
-        return (
-          DragDropTouch._ISPRESSHOLDMODE &&
-          !this._isDragEnabled &&
-          this._getDelta(e) > DragDropTouch._PRESSHOLDMARGIN
-        );
-      };
-
-      // start dragging when specified delta is detected
-      DragDropTouch.prototype._shouldStartDragging = function (e) {
-        var delta = this._getDelta(e);
-        return (
-          delta > DragDropTouch._THRESHOLD ||
-          (DragDropTouch._ISPRESSHOLDMODE &&
-            delta >= DragDropTouch._PRESSHOLDTHRESHOLD)
-        );
-      };
-
-      // clear all members
-      DragDropTouch.prototype._reset = function () {
-        this._destroyImage();
-        this._dragSource = null;
-        this._lastTouch = null;
-        this._lastTarget = null;
-        this._ptDown = null;
-        this._isDragEnabled = false;
-        this._isDropZone = false;
-        this._dataTransfer = new DataTransfer();
-        clearInterval(this._pressHoldInterval);
-      };
-      // get point for a touch event
-      DragDropTouch.prototype._getPoint = function (e, page) {
-        if (e && e.touches) {
-          e = e.touches[0];
-        }
-        return { x: page ? e.pageX : e.clientX, y: page ? e.pageY : e.clientY };
-      };
-      // get distance between the current touch event and the first one
-      DragDropTouch.prototype._getDelta = function (e) {
-        if (DragDropTouch._ISPRESSHOLDMODE && !this._ptDown) {
-          return 0;
-        }
-        var p = this._getPoint(e);
-        return Math.abs(p.x - this._ptDown.x) + Math.abs(p.y - this._ptDown.y);
-      };
-      // get the element at a given touch event
-      DragDropTouch.prototype._getTarget = function (e) {
-        var pt = this._getPoint(e),
-          el = document.elementFromPoint(pt.x, pt.y);
-        while (el && getComputedStyle(el).pointerEvents == "none") {
-          el = el.parentElement;
-        }
-        return el;
-      };
-      // create drag image from source element
-      DragDropTouch.prototype._createImage = function (e) {
-        // just in case...
-        if (this._img) {
-          this._destroyImage();
-        }
-        // create drag image from custom element or drag source
-        var src = this._imgCustom || this._dragSource;
-        this._img = src.cloneNode(true);
-        this._copyStyle(src, this._img);
-        this._img.style.top = this._img.style.left = "-9999px";
-        // if creating from drag source, apply offset and opacity
-        if (!this._imgCustom) {
-          var rc = src.getBoundingClientRect(),
-            pt = this._getPoint(e);
-          this._imgOffset = { x: pt.x - rc.left, y: pt.y - rc.top };
-          this._img.style.opacity = DragDropTouch._OPACITY.toString();
-        }
-        // add image to document
-        this._moveImage(e);
-        //document.body.appendChild(this._img);
-      };
-      // dispose of drag image element
-      DragDropTouch.prototype._destroyImage = function () {
-        if (this._img && this._img.parentElement) {
-          this._img.parentElement.removeChild(this._img);
-        }
-        this._img = null;
-        this._imgCustom = null;
-      };
-      // move the drag image element
-      DragDropTouch.prototype._moveImage = function (e) {
-        var _this = this;
-        requestAnimationFrame(function () {
-          if (_this._img) {
-            var pt = _this._getPoint(e, true),
-              s = _this._img.style;
-            s.position = "absolute";
-            s.pointerEvents = "none";
-            s.zIndex = "999999";
-            s.left = Math.round(pt.x - _this._imgOffset.x) + "px";
-            s.top = Math.round(pt.y - _this._imgOffset.y) + "px";
-          }
-        });
-      };
-      // copy properties from an object to another
-      DragDropTouch.prototype._copyProps = function (dst, src, props) {
-        for (var i = 0; i < props.length; i++) {
-          var p = props[i];
-          dst[p] = src[p];
-        }
-      };
-      DragDropTouch.prototype._copyStyle = function (src, dst) {
-        // remove potentially troublesome attributes
-        DragDropTouch._rmvAtts.forEach(function (att) {
-          dst.removeAttribute(att);
-        });
-        // copy canvas content
-        if (src instanceof HTMLCanvasElement) {
-          var cSrc = src,
-            cDst = dst;
-          cDst.width = cSrc.width;
-          cDst.height = cSrc.height;
-          cDst.getContext("2d").drawImage(cSrc, 0, 0);
-        }
-        // copy style (without transitions)
-        var cs = getComputedStyle(src);
-        for (var i = 0; i < cs.length; i++) {
-          var key = cs[i];
-          if (key.indexOf("transition") < 0) {
-            dst.style[key] = cs[key];
-          }
-        }
-        dst.style.pointerEvents = "none";
-        // and repeat for all children
-        for (var i = 0; i < src.children.length; i++) {
-          this._copyStyle(src.children[i], dst.children[i]);
-        }
-      };
-      DragDropTouch.prototype._dispatchEvent = function (e, type, target) {
-        if (e && target) {
-          var evt = document.createEvent("Event"),
-            t = e.touches ? e.touches[0] : e;
-          evt.initEvent(type, true, true);
-          evt.button = 0;
-          evt.which = evt.buttons = 1;
-          this._copyProps(evt, e, DragDropTouch._kbdProps);
-          this._copyProps(evt, t, DragDropTouch._ptProps);
-          evt.dataTransfer = this._dataTransfer;
-          target.dispatchEvent(evt);
-          return evt.defaultPrevented;
-        }
-        return false;
-      };
-      // gets an element's closest draggable ancestor
-      DragDropTouch.prototype._closestDraggable = function (e) {
-        for (; e; e = e.parentElement) {
-          if (e.hasAttribute("draggable") && e.draggable) {
-            return e;
-          }
-        }
-        return null;
-      };
-      return DragDropTouch;
-    })();
-    /*private*/ DragDropTouch._instance = new DragDropTouch(); // singleton
-    // constants
-    DragDropTouch._THRESHOLD = 5; // pixels to move before drag starts
-    DragDropTouch._OPACITY = 0.5; // drag image opacity
-    DragDropTouch._DBLCLICK = 500; // max ms between clicks in a double click
-    DragDropTouch._CTXMENU = 900; // ms to hold before raising 'contextmenu' event
-    DragDropTouch._ISPRESSHOLDMODE = false; // decides of press & hold mode presence
-    DragDropTouch._PRESSHOLDAWAIT = 400; // ms to wait before press & hold is detected
-    DragDropTouch._PRESSHOLDMARGIN = 25; // pixels that finger might shiver while pressing
-    DragDropTouch._PRESSHOLDTHRESHOLD = 0; // pixels to move before drag starts
-    // copy styles/attributes from drag source to drag image element
-    DragDropTouch._rmvAtts = "id,class,style,draggable".split(",");
-    // synthesize and dispatch an event
-    // returns true if the event has been handled (e.preventDefault == true)
-    DragDropTouch._kbdProps = "altKey,ctrlKey,metaKey,shiftKey".split(",");
-    DragDropTouch._ptProps =
-      "pageX,pageY,clientX,clientY,screenX,screenY,offsetX,offsetY".split(",");
-    DragDropTouch_1.DragDropTouch = DragDropTouch;
-  })(DragDropTouch || (DragDropTouch = {}));
-};
diff --git a/tailwind.config.js b/tailwind.config.js
index 780ff82..e3a6c74 100644
--- a/tailwind.config.js
+++ b/tailwind.config.js
@@ -1,4 +1,3 @@
-// eslint-disable-next-line no-undef
 module.exports = {
   content: ["./index.html", "./src/**/*.{vue,js,ts,jsx,tsx}"],
   theme: {
diff --git a/tsconfig.json b/tsconfig.json
index 677743f..73930d9 100644
--- a/tsconfig.json
+++ b/tsconfig.json
@@ -3,7 +3,7 @@
     "target": "ESNext",
     "useDefineForClassFields": true,
     "lib": ["DOM", "DOM.Iterable", "ESNext"],
-    "allowJs": true,
+    "allowJs": false,
     "skipLibCheck": false,
     "esModuleInterop": false,
     "allowSyntheticDefaultImports": true,
@@ -17,7 +17,15 @@
     "jsx": "react-jsx",
     "baseUrl": "./",
     "paths": {
-      "@/*": ["src/*"]
+      "@/*": ["src/*"],
+      "@components/*": ["src/components/*"],
+      "@context/*": ["src/context/*"],
+      "@interfaces/*": ["src/interfaces/*"],
+      "@layouts/*": ["src/layouts/*"],
+      "@pages/*": ["src/pages/*"],
+      "@static/*": ["src/static/*"],
+      "@utils/*": ["src/utils/*"],
+      "@hooks/*": ["src/hooks/*"]
     }
   },
   "include": ["src/**/*"],
diff --git a/vite.config.ts b/vite.config.ts
index 82dbdaa..85d26f3 100644
--- a/vite.config.ts
+++ b/vite.config.ts
@@ -8,6 +8,10 @@ export default defineConfig({
   resolve: {
     alias: {
       "@": path.resolve(__dirname, "./src"),
+      "@components": path.resolve(__dirname, "./src/components"),
+      "@styles": path.resolve(__dirname, "./src/styles"),
+      "@context": path.resolve(__dirname, "./src/context"),
+      "@interfaces": path.resolve(__dirname, "./src/interfaces"),
     },
   },
 });
